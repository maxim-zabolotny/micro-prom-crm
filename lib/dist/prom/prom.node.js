/*! For license information please see prom.node.js.LICENSE.txt */
!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.prom=n():e.prom=n()}(this,(()=>(()=>{var e={9118:(e,n,a)=>{e.exports={parallel:a(9162),serial:a(1357),serialOrdered:a(9087)}},7651:e=>{function n(e){"function"==typeof this.jobs[e]&&this.jobs[e]()}e.exports=function(e){Object.keys(e.jobs).forEach(n.bind(e)),e.jobs={}}},5912:(e,n,a)=>{var t=a(9265);e.exports=function(e){var n=!1;return t((function(){n=!0})),function(a,i){n?e(a,i):t((function(){e(a,i)}))}}},9265:e=>{e.exports=function(e){var n="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;n?n(e):setTimeout(e,0)}},7594:(e,n,a)=>{var t=a(5912),i=a(7651);e.exports=function(e,n,a,o){var r=a.keyedList?a.keyedList[a.index]:a.index;a.jobs[r]=function(e,n,a,i){var o;o=2==e.length?e(a,t(i)):e(a,n,t(i));return o}(n,r,e[r],(function(e,n){r in a.jobs&&(delete a.jobs[r],e?i(a):a.results[r]=n,o(e,a.results))}))}},4528:e=>{e.exports=function(e,n){var a=!Array.isArray(e),t={index:0,keyedList:a||n?Object.keys(e):null,jobs:{},results:a?{}:[],size:a?Object.keys(e).length:e.length};n&&t.keyedList.sort(a?n:function(a,t){return n(e[a],e[t])});return t}},5353:(e,n,a)=>{var t=a(7651),i=a(5912);e.exports=function(e){if(!Object.keys(this.jobs).length)return;this.index=this.size,t(this),i(e)(null,this.results)}},9162:(e,n,a)=>{var t=a(7594),i=a(4528),o=a(5353);e.exports=function(e,n,a){var r=i(e);for(;r.index<(r.keyedList||e).length;)t(e,n,r,(function(e,n){e?a(e,n):0!==Object.keys(r.jobs).length||a(null,r.results)})),r.index++;return o.bind(r,a)}},1357:(e,n,a)=>{var t=a(9087);e.exports=function(e,n,a){return t(e,n,null,a)}},9087:(e,n,a)=>{var t=a(7594),i=a(4528),o=a(5353);function r(e,n){return e<n?-1:e>n?1:0}e.exports=function(e,n,a,r){var s=i(e,a);return t(e,n,s,(function a(i,o){i?r(i,o):(s.index++,s.index<(s.keyedList||e).length?t(e,n,s,a):r(null,s.results))})),o.bind(s,r)},e.exports.ascending=r,e.exports.descending=function(e,n){return-1*r(e,n)}},9669:(e,n,a)=>{e.exports=a(1609)},7970:(e,n,a)=>{"use strict";var t=a(4867),i=a(6026),o=a(4097),r=a(5327),s=a(3685),c=a(5687),p=a(938).http,u=a(938).https,l=a(7310),d=a(9796),m=a(7288).version,f=a(7874),v=a(2648),x=a(644),h=/https:?/,b=["http:","https:","file:"];function g(e,n,a){if(e.hostname=n.host,e.host=n.host,e.port=n.port,e.path=a,n.auth){var t=Buffer.from(n.auth.username+":"+n.auth.password,"utf8").toString("base64");e.headers["Proxy-Authorization"]="Basic "+t}e.beforeRedirect=function(e){e.headers.host=e.host,g(e,n,e.href)}}e.exports=function(e){return new Promise((function(n,a){var y;function _(){e.cancelToken&&e.cancelToken.unsubscribe(y),e.signal&&e.signal.removeEventListener("abort",y)}var w=function(e){_(),n(e)},j=!1,k=function(e){_(),j=!0,a(e)},E=e.data,O=e.headers,P={};if(Object.keys(O).forEach((function(e){P[e.toLowerCase()]=e})),"user-agent"in P?O[P["user-agent"]]||delete O[P["user-agent"]]:O["User-Agent"]="axios/"+m,t.isFormData(E)&&t.isFunction(E.getHeaders))Object.assign(O,E.getHeaders());else if(E&&!t.isStream(E)){if(Buffer.isBuffer(E));else if(t.isArrayBuffer(E))E=Buffer.from(new Uint8Array(E));else{if(!t.isString(E))return k(new v("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",v.ERR_BAD_REQUEST,e));E=Buffer.from(E,"utf-8")}if(e.maxBodyLength>-1&&E.length>e.maxBodyLength)return k(new v("Request body larger than maxBodyLength limit",v.ERR_BAD_REQUEST,e));P["content-length"]||(O["Content-Length"]=E.length)}var R=void 0;e.auth&&(R=(e.auth.username||"")+":"+(e.auth.password||""));var C=o(e.baseURL,e.url),S=l.parse(C),A=S.protocol||b[0];if(-1===b.indexOf(A))return k(new v("Unsupported protocol "+A,v.ERR_BAD_REQUEST,e));if(!R&&S.auth){var T=S.auth.split(":");R=(T[0]||"")+":"+(T[1]||"")}R&&P.authorization&&delete O[P.authorization];var z=h.test(A),q=z?e.httpsAgent:e.httpAgent;try{r(S.path,e.params,e.paramsSerializer).replace(/^\?/,"")}catch(n){var D=new Error(n.message);D.config=e,D.url=e.url,D.exists=!0,k(D)}var L={path:r(S.path,e.params,e.paramsSerializer).replace(/^\?/,""),method:e.method.toUpperCase(),headers:O,agent:q,agents:{http:e.httpAgent,https:e.httpsAgent},auth:R};e.socketPath?L.socketPath=e.socketPath:(L.hostname=S.hostname,L.port=S.port);var B,U=e.proxy;if(!U&&!1!==U){var F=A.slice(0,-1)+"_proxy",I=process.env[F]||process.env[F.toUpperCase()];if(I){var M=l.parse(I),N=process.env.no_proxy||process.env.NO_PROXY,H=!0;if(N)H=!N.split(",").map((function(e){return e.trim()})).some((function(e){return!!e&&("*"===e||("."===e[0]&&S.hostname.substr(S.hostname.length-e.length)===e||S.hostname===e))}));if(H&&(U={host:M.hostname,port:M.port,protocol:M.protocol},M.auth)){var W=M.auth.split(":");U.auth={username:W[0],password:W[1]}}}}U&&(L.headers.host=S.hostname+(S.port?":"+S.port:""),g(L,U,A+"//"+S.hostname+(S.port?":"+S.port:"")+L.path));var $=z&&(!U||h.test(U.protocol));e.transport?B=e.transport:0===e.maxRedirects?B=$?c:s:(e.maxRedirects&&(L.maxRedirects=e.maxRedirects),e.beforeRedirect&&(L.beforeRedirect=e.beforeRedirect),B=$?u:p),e.maxBodyLength>-1&&(L.maxBodyLength=e.maxBodyLength),e.insecureHTTPParser&&(L.insecureHTTPParser=e.insecureHTTPParser);var G=B.request(L,(function(n){if(!G.aborted){var a=n,o=n.req||G;if(204!==n.statusCode&&"HEAD"!==o.method&&!1!==e.decompress)switch(n.headers["content-encoding"]){case"gzip":case"compress":case"deflate":a=a.pipe(d.createUnzip()),delete n.headers["content-encoding"]}var r={status:n.statusCode,statusText:n.statusMessage,headers:n.headers,config:e,request:o};if("stream"===e.responseType)r.data=a,i(w,k,r);else{var s=[],c=0;a.on("data",(function(n){s.push(n),c+=n.length,e.maxContentLength>-1&&c>e.maxContentLength&&(j=!0,a.destroy(),k(new v("maxContentLength size of "+e.maxContentLength+" exceeded",v.ERR_BAD_RESPONSE,e,o)))})),a.on("aborted",(function(){j||(a.destroy(),k(new v("maxContentLength size of "+e.maxContentLength+" exceeded",v.ERR_BAD_RESPONSE,e,o)))})),a.on("error",(function(n){G.aborted||k(v.from(n,null,e,o))})),a.on("end",(function(){try{var n=1===s.length?s[0]:Buffer.concat(s);"arraybuffer"!==e.responseType&&(n=n.toString(e.responseEncoding),e.responseEncoding&&"utf8"!==e.responseEncoding||(n=t.stripBOM(n))),r.data=n}catch(n){k(v.from(n,null,e,r.request,r))}i(w,k,r)}))}}}));if(G.on("error",(function(n){k(v.from(n,null,e,G))})),G.on("socket",(function(e){e.setKeepAlive(!0,6e4)})),e.timeout){var V=parseInt(e.timeout,10);if(isNaN(V))return void k(new v("error trying to parse `config.timeout` to int",v.ERR_BAD_OPTION_VALUE,e,G));G.setTimeout(V,(function(){G.abort();var n=e.transitional||f;k(new v("timeout of "+V+"ms exceeded",n.clarifyTimeoutError?v.ETIMEDOUT:v.ECONNABORTED,e,G))}))}(e.cancelToken||e.signal)&&(y=function(e){G.aborted||(G.abort(),k(!e||e&&e.type?new x:e))},e.cancelToken&&e.cancelToken.subscribe(y),e.signal&&(e.signal.aborted?y():e.signal.addEventListener("abort",y))),t.isStream(E)?E.on("error",(function(n){k(v.from(n,e,null,G))})).pipe(G):G.end(E)}))}},5448:(e,n,a)=>{"use strict";var t=a(4867),i=a(6026),o=a(4372),r=a(5327),s=a(4097),c=a(4109),p=a(7985),u=a(7874),l=a(2648),d=a(644),m=a(205);e.exports=function(e){return new Promise((function(n,a){var f,v=e.data,x=e.headers,h=e.responseType;function b(){e.cancelToken&&e.cancelToken.unsubscribe(f),e.signal&&e.signal.removeEventListener("abort",f)}t.isFormData(v)&&t.isStandardBrowserEnv()&&delete x["Content-Type"];var g=new XMLHttpRequest;if(e.auth){var y=e.auth.username||"",_=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";x.Authorization="Basic "+btoa(y+":"+_)}var w=s(e.baseURL,e.url);function j(){if(g){var t="getAllResponseHeaders"in g?c(g.getAllResponseHeaders()):null,o={data:h&&"text"!==h&&"json"!==h?g.response:g.responseText,status:g.status,statusText:g.statusText,headers:t,config:e,request:g};i((function(e){n(e),b()}),(function(e){a(e),b()}),o),g=null}}if(g.open(e.method.toUpperCase(),r(w,e.params,e.paramsSerializer),!0),g.timeout=e.timeout,"onloadend"in g?g.onloadend=j:g.onreadystatechange=function(){g&&4===g.readyState&&(0!==g.status||g.responseURL&&0===g.responseURL.indexOf("file:"))&&setTimeout(j)},g.onabort=function(){g&&(a(new l("Request aborted",l.ECONNABORTED,e,g)),g=null)},g.onerror=function(){a(new l("Network Error",l.ERR_NETWORK,e,g,g)),g=null},g.ontimeout=function(){var n=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",t=e.transitional||u;e.timeoutErrorMessage&&(n=e.timeoutErrorMessage),a(new l(n,t.clarifyTimeoutError?l.ETIMEDOUT:l.ECONNABORTED,e,g)),g=null},t.isStandardBrowserEnv()){var k=(e.withCredentials||p(w))&&e.xsrfCookieName?o.read(e.xsrfCookieName):void 0;k&&(x[e.xsrfHeaderName]=k)}"setRequestHeader"in g&&t.forEach(x,(function(e,n){void 0===v&&"content-type"===n.toLowerCase()?delete x[n]:g.setRequestHeader(n,e)})),t.isUndefined(e.withCredentials)||(g.withCredentials=!!e.withCredentials),h&&"json"!==h&&(g.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&g.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&g.upload&&g.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(f=function(e){g&&(a(!e||e&&e.type?new d:e),g.abort(),g=null)},e.cancelToken&&e.cancelToken.subscribe(f),e.signal&&(e.signal.aborted?f():e.signal.addEventListener("abort",f))),v||(v=null);var E=m(w);E&&-1===["http","https","file"].indexOf(E)?a(new l("Unsupported protocol "+E+":",l.ERR_BAD_REQUEST,e)):g.send(v)}))}},1609:(e,n,a)=>{"use strict";var t=a(4867),i=a(1849),o=a(321),r=a(7185);var s=function e(n){var a=new o(n),s=i(o.prototype.request,a);return t.extend(s,o.prototype,a),t.extend(s,a),s.create=function(a){return e(r(n,a))},s}(a(5546));s.Axios=o,s.CanceledError=a(644),s.CancelToken=a(4972),s.isCancel=a(6502),s.VERSION=a(7288).version,s.toFormData=a(7675),s.AxiosError=a(2648),s.Cancel=s.CanceledError,s.all=function(e){return Promise.all(e)},s.spread=a(8713),s.isAxiosError=a(6268),e.exports=s,e.exports.default=s},4972:(e,n,a)=>{"use strict";var t=a(644);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(e){n=e}));var a=this;this.promise.then((function(e){if(a._listeners){var n,t=a._listeners.length;for(n=0;n<t;n++)a._listeners[n](e);a._listeners=null}})),this.promise.then=function(e){var n,t=new Promise((function(e){a.subscribe(e),n=e})).then(e);return t.cancel=function(){a.unsubscribe(n)},t},e((function(e){a.reason||(a.reason=new t(e),n(a.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},i.prototype.unsubscribe=function(e){if(this._listeners){var n=this._listeners.indexOf(e);-1!==n&&this._listeners.splice(n,1)}},i.source=function(){var e;return{token:new i((function(n){e=n})),cancel:e}},e.exports=i},644:(e,n,a)=>{"use strict";var t=a(2648);function i(e){t.call(this,null==e?"canceled":e,t.ERR_CANCELED),this.name="CanceledError"}a(4867).inherits(i,t,{__CANCEL__:!0}),e.exports=i},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,n,a)=>{"use strict";var t=a(4867),i=a(5327),o=a(782),r=a(3572),s=a(7185),c=a(4097),p=a(4875),u=p.validators;function l(e){this.defaults=e,this.interceptors={request:new o,response:new o}}l.prototype.request=function(e,n){"string"==typeof e?(n=n||{}).url=e:n=e||{},(n=s(this.defaults,n)).method?n.method=n.method.toLowerCase():this.defaults.method?n.method=this.defaults.method.toLowerCase():n.method="get";var a=n.transitional;void 0!==a&&p.assertOptions(a,{silentJSONParsing:u.transitional(u.boolean),forcedJSONParsing:u.transitional(u.boolean),clarifyTimeoutError:u.transitional(u.boolean)},!1);var t=[],i=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(n)||(i=i&&e.synchronous,t.unshift(e.fulfilled,e.rejected))}));var o,c=[];if(this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)})),!i){var l=[r,void 0];for(Array.prototype.unshift.apply(l,t),l=l.concat(c),o=Promise.resolve(n);l.length;)o=o.then(l.shift(),l.shift());return o}for(var d=n;t.length;){var m=t.shift(),f=t.shift();try{d=m(d)}catch(e){f(e);break}}try{o=r(d)}catch(e){return Promise.reject(e)}for(;c.length;)o=o.then(c.shift(),c.shift());return o},l.prototype.getUri=function(e){e=s(this.defaults,e);var n=c(e.baseURL,e.url);return i(n,e.params,e.paramsSerializer)},t.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(n,a){return this.request(s(a||{},{method:e,url:n,data:(a||{}).data}))}})),t.forEach(["post","put","patch"],(function(e){function n(n){return function(a,t,i){return this.request(s(i||{},{method:e,headers:n?{"Content-Type":"multipart/form-data"}:{},url:a,data:t}))}}l.prototype[e]=n(),l.prototype[e+"Form"]=n(!0)})),e.exports=l},2648:(e,n,a)=>{"use strict";var t=a(4867);function i(e,n,a,t,i){Error.call(this),this.message=e,this.name="AxiosError",n&&(this.code=n),a&&(this.config=a),t&&(this.request=t),i&&(this.response=i)}t.inherits(i,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var o=i.prototype,r={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){r[e]={value:e}})),Object.defineProperties(i,r),Object.defineProperty(o,"isAxiosError",{value:!0}),i.from=function(e,n,a,r,s,c){var p=Object.create(o);return t.toFlatObject(e,p,(function(e){return e!==Error.prototype})),i.call(p,e.message,n,a,r,s),p.name=e.name,c&&Object.assign(p,c),p},e.exports=i},782:(e,n,a)=>{"use strict";var t=a(4867);function i(){this.handlers=[]}i.prototype.use=function(e,n,a){return this.handlers.push({fulfilled:e,rejected:n,synchronous:!!a&&a.synchronous,runWhen:a?a.runWhen:null}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){t.forEach(this.handlers,(function(n){null!==n&&e(n)}))},e.exports=i},4097:(e,n,a)=>{"use strict";var t=a(1793),i=a(7303);e.exports=function(e,n){return e&&!t(n)?i(e,n):n}},3572:(e,n,a)=>{"use strict";var t=a(4867),i=a(8527),o=a(6502),r=a(5546),s=a(644);function c(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new s}e.exports=function(e){return c(e),e.headers=e.headers||{},e.data=i.call(e,e.data,e.headers,e.transformRequest),e.headers=t.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),t.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete e.headers[n]})),(e.adapter||r.adapter)(e).then((function(n){return c(e),n.data=i.call(e,n.data,n.headers,e.transformResponse),n}),(function(n){return o(n)||(c(e),n&&n.response&&(n.response.data=i.call(e,n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)}))}},7185:(e,n,a)=>{"use strict";var t=a(4867);e.exports=function(e,n){n=n||{};var a={};function i(e,n){return t.isPlainObject(e)&&t.isPlainObject(n)?t.merge(e,n):t.isPlainObject(n)?t.merge({},n):t.isArray(n)?n.slice():n}function o(a){return t.isUndefined(n[a])?t.isUndefined(e[a])?void 0:i(void 0,e[a]):i(e[a],n[a])}function r(e){if(!t.isUndefined(n[e]))return i(void 0,n[e])}function s(a){return t.isUndefined(n[a])?t.isUndefined(e[a])?void 0:i(void 0,e[a]):i(void 0,n[a])}function c(a){return a in n?i(e[a],n[a]):a in e?i(void 0,e[a]):void 0}var p={url:r,method:r,data:r,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:c};return t.forEach(Object.keys(e).concat(Object.keys(n)),(function(e){var n=p[e]||o,i=n(e);t.isUndefined(i)&&n!==c||(a[e]=i)})),a}},6026:(e,n,a)=>{"use strict";var t=a(2648);e.exports=function(e,n,a){var i=a.config.validateStatus;a.status&&i&&!i(a.status)?n(new t("Request failed with status code "+a.status,[t.ERR_BAD_REQUEST,t.ERR_BAD_RESPONSE][Math.floor(a.status/100)-4],a.config,a.request,a)):e(a)}},8527:(e,n,a)=>{"use strict";var t=a(4867),i=a(5546);e.exports=function(e,n,a){var o=this||i;return t.forEach(a,(function(a){e=a.call(o,e,n)})),e}},3784:(e,n,a)=>{e.exports=a(6882)},5546:(e,n,a)=>{"use strict";var t=a(4867),i=a(6016),o=a(2648),r=a(7874),s=a(7675),c={"Content-Type":"application/x-www-form-urlencoded"};function p(e,n){!t.isUndefined(e)&&t.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var u,l={transitional:r,adapter:("undefined"!=typeof XMLHttpRequest?u=a(5448):"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process)&&(u=a(7970)),u),transformRequest:[function(e,n){if(i(n,"Accept"),i(n,"Content-Type"),t.isFormData(e)||t.isArrayBuffer(e)||t.isBuffer(e)||t.isStream(e)||t.isFile(e)||t.isBlob(e))return e;if(t.isArrayBufferView(e))return e.buffer;if(t.isURLSearchParams(e))return p(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var a,o=t.isObject(e),r=n&&n["Content-Type"];if((a=t.isFileList(e))||o&&"multipart/form-data"===r){var c=this.env&&this.env.FormData;return s(a?{"files[]":e}:e,c&&new c)}return o||"application/json"===r?(p(n,"application/json"),function(e,n,a){if(t.isString(e))try{return(n||JSON.parse)(e),t.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(a||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var n=this.transitional||l.transitional,a=n&&n.silentJSONParsing,i=n&&n.forcedJSONParsing,r=!a&&"json"===this.responseType;if(r||i&&t.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(r){if("SyntaxError"===e.name)throw o.from(e,o.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:a(3784)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};t.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),t.forEach(["post","put","patch"],(function(e){l.headers[e]=t.merge(c)})),e.exports=l},7874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},7288:e=>{e.exports={version:"0.27.2"}},1849:e=>{"use strict";e.exports=function(e,n){return function(){for(var a=new Array(arguments.length),t=0;t<a.length;t++)a[t]=arguments[t];return e.apply(n,a)}}},5327:(e,n,a)=>{"use strict";var t=a(4867);function i(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,n,a){if(!n)return e;var o;if(a)o=a(n);else if(t.isURLSearchParams(n))o=n.toString();else{var r=[];t.forEach(n,(function(e,n){null!=e&&(t.isArray(e)?n+="[]":e=[e],t.forEach(e,(function(e){t.isDate(e)?e=e.toISOString():t.isObject(e)&&(e=JSON.stringify(e)),r.push(i(n)+"="+i(e))})))})),o=r.join("&")}if(o){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},7303:e=>{"use strict";e.exports=function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}},4372:(e,n,a)=>{"use strict";var t=a(4867);e.exports=t.isStandardBrowserEnv()?{write:function(e,n,a,i,o,r){var s=[];s.push(e+"="+encodeURIComponent(n)),t.isNumber(a)&&s.push("expires="+new Date(a).toGMTString()),t.isString(i)&&s.push("path="+i),t.isString(o)&&s.push("domain="+o),!0===r&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},6268:(e,n,a)=>{"use strict";var t=a(4867);e.exports=function(e){return t.isObject(e)&&!0===e.isAxiosError}},7985:(e,n,a)=>{"use strict";var t=a(4867);e.exports=t.isStandardBrowserEnv()?function(){var e,n=/(msie|trident)/i.test(navigator.userAgent),a=document.createElement("a");function i(e){var t=e;return n&&(a.setAttribute("href",t),t=a.href),a.setAttribute("href",t),{href:a.href,protocol:a.protocol?a.protocol.replace(/:$/,""):"",host:a.host,search:a.search?a.search.replace(/^\?/,""):"",hash:a.hash?a.hash.replace(/^#/,""):"",hostname:a.hostname,port:a.port,pathname:"/"===a.pathname.charAt(0)?a.pathname:"/"+a.pathname}}return e=i(window.location.href),function(n){var a=t.isString(n)?i(n):n;return a.protocol===e.protocol&&a.host===e.host}}():function(){return!0}},6016:(e,n,a)=>{"use strict";var t=a(4867);e.exports=function(e,n){t.forEach(e,(function(a,t){t!==n&&t.toUpperCase()===n.toUpperCase()&&(e[n]=a,delete e[t])}))}},4109:(e,n,a)=>{"use strict";var t=a(4867),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var n,a,o,r={};return e?(t.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),n=t.trim(e.substr(0,o)).toLowerCase(),a=t.trim(e.substr(o+1)),n){if(r[n]&&i.indexOf(n)>=0)return;r[n]="set-cookie"===n?(r[n]?r[n]:[]).concat([a]):r[n]?r[n]+", "+a:a}})),r):r}},205:e=>{"use strict";e.exports=function(e){var n=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return n&&n[1]||""}},8713:e=>{"use strict";e.exports=function(e){return function(n){return e.apply(null,n)}}},7675:(e,n,a)=>{"use strict";var t=a(4867);e.exports=function(e,n){n=n||new FormData;var a=[];function i(e){return null===e?"":t.isDate(e)?e.toISOString():t.isArrayBuffer(e)||t.isTypedArray(e)?"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}return function e(o,r){if(t.isPlainObject(o)||t.isArray(o)){if(-1!==a.indexOf(o))throw Error("Circular reference detected in "+r);a.push(o),t.forEach(o,(function(a,o){if(!t.isUndefined(a)){var s,c=r?r+"."+o:o;if(a&&!r&&"object"==typeof a)if(t.endsWith(o,"{}"))a=JSON.stringify(a);else if(t.endsWith(o,"[]")&&(s=t.toArray(a)))return void s.forEach((function(e){!t.isUndefined(e)&&n.append(c,i(e))}));e(a,c)}})),a.pop()}else n.append(r,i(o))}(e),n}},4875:(e,n,a)=>{"use strict";var t=a(7288).version,i=a(2648),o={};["object","boolean","number","function","string","symbol"].forEach((function(e,n){o[e]=function(a){return typeof a===e||"a"+(n<1?"n ":" ")+e}}));var r={};o.transitional=function(e,n,a){function o(e,n){return"[Axios v"+t+"] Transitional option '"+e+"'"+n+(a?". "+a:"")}return function(a,t,s){if(!1===e)throw new i(o(t," has been removed"+(n?" in "+n:"")),i.ERR_DEPRECATED);return n&&!r[t]&&(r[t]=!0,console.warn(o(t," has been deprecated since v"+n+" and will be removed in the near future"))),!e||e(a,t,s)}},e.exports={assertOptions:function(e,n,a){if("object"!=typeof e)throw new i("options must be an object",i.ERR_BAD_OPTION_VALUE);for(var t=Object.keys(e),o=t.length;o-- >0;){var r=t[o],s=n[r];if(s){var c=e[r],p=void 0===c||s(c,r,e);if(!0!==p)throw new i("option "+r+" must be "+p,i.ERR_BAD_OPTION_VALUE)}else if(!0!==a)throw new i("Unknown option "+r,i.ERR_BAD_OPTION)}},validators:o}},4867:(e,n,a)=>{"use strict";var t,i=a(1849),o=Object.prototype.toString,r=(t=Object.create(null),function(e){var n=o.call(e);return t[n]||(t[n]=n.slice(8,-1).toLowerCase())});function s(e){return e=e.toLowerCase(),function(n){return r(n)===e}}function c(e){return Array.isArray(e)}function p(e){return void 0===e}var u=s("ArrayBuffer");function l(e){return null!==e&&"object"==typeof e}function d(e){if("object"!==r(e))return!1;var n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}var m=s("Date"),f=s("File"),v=s("Blob"),x=s("FileList");function h(e){return"[object Function]"===o.call(e)}var b=s("URLSearchParams");function g(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),c(e))for(var a=0,t=e.length;a<t;a++)n.call(null,e[a],a,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&n.call(null,e[i],i,e)}var y,_=(y="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return y&&e instanceof y});e.exports={isArray:c,isArrayBuffer:u,isBuffer:function(e){return null!==e&&!p(e)&&null!==e.constructor&&!p(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var n="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||o.call(e)===n||h(e.toString)&&e.toString()===n)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&u(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isPlainObject:d,isUndefined:p,isDate:m,isFile:f,isBlob:v,isFunction:h,isStream:function(e){return l(e)&&h(e.pipe)},isURLSearchParams:b,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:g,merge:function e(){var n={};function a(a,t){d(n[t])&&d(a)?n[t]=e(n[t],a):d(a)?n[t]=e({},a):c(a)?n[t]=a.slice():n[t]=a}for(var t=0,i=arguments.length;t<i;t++)g(arguments[t],a);return n},extend:function(e,n,a){return g(n,(function(n,t){e[t]=a&&"function"==typeof n?i(n,a):n})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,n,a,t){e.prototype=Object.create(n.prototype,t),e.prototype.constructor=e,a&&Object.assign(e.prototype,a)},toFlatObject:function(e,n,a){var t,i,o,r={};n=n||{};do{for(i=(t=Object.getOwnPropertyNames(e)).length;i-- >0;)r[o=t[i]]||(n[o]=e[o],r[o]=!0);e=Object.getPrototypeOf(e)}while(e&&(!a||a(e,n))&&e!==Object.prototype);return n},kindOf:r,kindOfTest:s,endsWith:function(e,n,a){e=String(e),(void 0===a||a>e.length)&&(a=e.length),a-=n.length;var t=e.indexOf(n,a);return-1!==t&&t===a},toArray:function(e){if(!e)return null;var n=e.length;if(p(n))return null;for(var a=new Array(n);n-- >0;)a[n]=e[n];return a},isTypedArray:_,isFileList:x}},3879:function(e,n,a){"use strict";var t,i=this&&this.__extends||(t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])},t(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function a(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(a.prototype=n.prototype,new a)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var n,a=1,t=arguments.length;a<t;a++)for(var i in n=arguments[a])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},o.apply(this,arguments)},r=this&&this.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function r(e){try{c(t.next(e))}catch(e){o(e)}}function s(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(r,s)}c((t=t.apply(e,n||[])).next())}))},s=this&&this.__generator||function(e,n){var a,t,i,o,r={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;r;)try{if(a=1,t&&(i=2&o[0]?t.return:o[0]?t.throw||((i=t.return)&&i.call(t),0):t.next)&&!(i=i.call(t,o[1])).done)return i;switch(t=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,t=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(i=r.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){r=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){r.label=o[1];break}if(6===o[0]&&r.label<i[1]){r.label=i[1],i=o;break}if(i&&r.label<i[2]){r.label=i[2],r.ops.push(o);break}i[2]&&r.ops.pop(),r.trys.pop();continue}o=n.call(e,r)}catch(e){o=[6,e],t=0}finally{a=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.Client=void 0;var p=c(a(4078)),u=a(7764),l=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return i(n,e),n.prototype.buildUrl=function(e){return(0,p.default)(n.BASE_PATH,String(e))},n.prototype.getList=function(e){return void 0===e&&(e={}),r(this,void 0,void 0,(function(){var n;return s(this,(function(a){switch(a.label){case 0:return n=o({},e),[4,this.makeRequest(u.HttpMethods.Get,this.buildUrl("list"),{},n)];case 1:return[2,a.sent().body]}}))}))},n.prototype.getById=function(e){return r(this,void 0,void 0,(function(){return s(this,(function(n){switch(n.label){case 0:return[4,this.makeRequest(u.HttpMethods.Get,this.buildUrl(e),{},{})];case 1:return[2,n.sent().body]}}))}))},n.BASE_PATH="clients",n}(u.Request);n.Client=l},8049:function(e,n,a){"use strict";var t,i=this&&this.__extends||(t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])},t(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function a(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(a.prototype=n.prototype,new a)}),o=this&&this.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function r(e){try{c(t.next(e))}catch(e){o(e)}}function s(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(r,s)}c((t=t.apply(e,n||[])).next())}))},r=this&&this.__generator||function(e,n){var a,t,i,o,r={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;r;)try{if(a=1,t&&(i=2&o[0]?t.return:o[0]?t.throw||((i=t.return)&&i.call(t),0):t.next)&&!(i=i.call(t,o[1])).done)return i;switch(t=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,t=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(i=r.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){r=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){r.label=o[1];break}if(6===o[0]&&r.label<i[1]){r.label=i[1],i=o;break}if(i&&r.label<i[2]){r.label=i[2],r.ops.push(o);break}i[2]&&r.ops.pop(),r.trys.pop();continue}o=n.call(e,r)}catch(e){o=[6,e],t=0}finally{a=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.Delivery=void 0;var c=s(a(4078)),p=a(7764),u=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return i(n,e),n.prototype.buildUrl=function(e){return(0,c.default)(n.BASE_PATH,String(e))},n.prototype.saveDeclaration=function(e){return o(this,void 0,void 0,(function(){return r(this,(function(n){switch(n.label){case 0:return[4,this.makeRequest(p.HttpMethods.Post,this.buildUrl("save_declaration_id"),e,{})];case 1:return[2,n.sent().body]}}))}))},n.BASE_PATH="delivery",n}(p.Request);n.Delivery=u},4800:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.AxiosExtendedError=void 0;var a=function(){function e(n){var a,t,i=n.code,o=n.response,r=o.status,s=o.statusText,c=o.data,p=o.config;this.name=e.name,this.message="[".concat(this.name,"] Prom API error - [").concat(r,"] ").concat(s),this.data=c,this.timestamp=new Date,this.path="".concat(null!==(a=p.baseURL)&&void 0!==a?a:"").concat(null!==(t=p.url)&&void 0!==t?t:""),this.code=i,this.statusCode=r,this.statusText=s,this.config=p,this.response=o}return e.isAxiosExtendedError=function(n){return n instanceof e},e}();n.AxiosExtendedError=a},2923:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.APIErrorType=void 0,function(e){e.Default="Default",e.ProductEdit="ProductEdit",e.ImportProducts="ImportProducts",e.SaveDeliveryDeclaration="SaveDeliveryDeclaration"}(n.APIErrorType||(n.APIErrorType={}))},7519:function(e,n,a){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.PromAPIError=void 0;var i=t(a(6486)),o=a(2923),r=function(){function e(n){var a,t,o=n.data,r=n.config;this.name=e.name;var s=o,c=i.default.get(o,"error",i.default.get(o,"message",""));this.type=e.getErrorType(s),this.message="[".concat(this.name,"] Prom API error - ").concat(c),this.data=s,this.timestamp=new Date,this.path="".concat(null!==(a=r.baseURL)&&void 0!==a?a:"").concat(null!==(t=r.url)&&void 0!==t?t:""),this.config=r,this.response=n}return e.validateError=function(e,n,a){var t=i.default.every(n,(function(n){return n in e}))&&i.default.isEqual(Object.keys(e).length,n.length);return a?t&&i.default.conformsTo(e,a):t},e.isPromError=function(n){return n instanceof e},e.getErrorType=function(e){switch(!0){case this.validateError(e,["status","message","errors"],{status:function(e){return"error"===e},errors:function(e){return Object.keys(e).length>0}}):return o.APIErrorType.SaveDeliveryDeclaration;case this.validateError(e,["status","message"]):return o.APIErrorType.ImportProducts;case this.validateError(e,["errors","processed_ids"],{errors:function(e){return Object.keys(e).length>0}}):return o.APIErrorType.ProductEdit;case this.validateError(e,["error"]):return o.APIErrorType.Default;default:return null}},e}();n.PromAPIError=r},9837:(e,n,a)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.APIErrorType=n.PromAPIError=n.AxiosExtendedError=void 0;var t=a(4800);Object.defineProperty(n,"AxiosExtendedError",{enumerable:!0,get:function(){return t.AxiosExtendedError}});var i=a(7519);Object.defineProperty(n,"PromAPIError",{enumerable:!0,get:function(){return i.PromAPIError}});var o=a(2923);Object.defineProperty(n,"APIErrorType",{enumerable:!0,get:function(){return o.APIErrorType}})},4370:function(e,n,a){"use strict";var t,i=this&&this.__extends||(t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])},t(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function a(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(a.prototype=n.prototype,new a)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var n,a=1,t=arguments.length;a<t;a++)for(var i in n=arguments[a])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},o.apply(this,arguments)},r=this&&this.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function r(e){try{c(t.next(e))}catch(e){o(e)}}function s(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(r,s)}c((t=t.apply(e,n||[])).next())}))},s=this&&this.__generator||function(e,n){var a,t,i,o,r={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;r;)try{if(a=1,t&&(i=2&o[0]?t.return:o[0]?t.throw||((i=t.return)&&i.call(t),0):t.next)&&!(i=i.call(t,o[1])).done)return i;switch(t=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,t=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(i=r.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){r=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){r.label=o[1];break}if(6===o[0]&&r.label<i[1]){r.label=i[1],i=o;break}if(i&&r.label<i[2]){r.label=i[2],r.ops.push(o);break}i[2]&&r.ops.pop(),r.trys.pop();continue}o=n.call(e,r)}catch(e){o=[6,e],t=0}finally{a=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.Group=void 0;var p=c(a(4078)),u=a(7764),l=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return i(n,e),n.prototype.buildUrl=function(e){return(0,p.default)(n.BASE_PATH,String(e))},n.prototype.getList=function(e){return void 0===e&&(e={}),r(this,void 0,void 0,(function(){var n;return s(this,(function(a){switch(a.label){case 0:return n=o({},e),[4,this.makeRequest(u.HttpMethods.Get,this.buildUrl("list"),{},n)];case 1:return[2,a.sent().body]}}))}))},n.BASE_PATH="groups",n}(u.Request);n.Group=l},1316:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.PaymentStatus=n.PaymentType=n.OrderCancellationReason=n.OrderSource=n.OrderStatus=void 0,function(e){e.Pending="pending",e.Received="received",e.Delivered="delivered",e.Canceled="canceled",e.Draft="draft",e.Paid="paid"}(n.OrderStatus||(n.OrderStatus={})),function(e){e.Portal="portal",e.CompanySite="company_site",e.CompanyCabinet="company_cabinet",e.MobileApp="mobile_app",e.Bigl="bigl"}(n.OrderSource||(n.OrderSource={})),function(e){e.NotAvailable="not_available",e.PriceChanged="price_changed",e.BuyersRequest="buyers_request",e.NotEnoughFields="not_enough_fields",e.Duplicate="duplicate",e.InvalidPhoneNumber="invalid_phone_number",e.LessThanMinimalPrice="less_than_minimal_price",e.Another="another"}(n.OrderCancellationReason||(n.OrderCancellationReason={})),function(e){e.EvoPay="evopay"}(n.PaymentType||(n.PaymentType={})),function(e){e.Paid="paid",e.Unpaid="unpaid",e.Refunded="refunded",e.PaidOut="paid_out"}(n.PaymentStatus||(n.PaymentStatus={}))},3450:function(e,n,a){"use strict";var t,i=this&&this.__extends||(t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])},t(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function a(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(a.prototype=n.prototype,new a)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var n,a=1,t=arguments.length;a<t;a++)for(var i in n=arguments[a])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},o.apply(this,arguments)},r=this&&this.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function r(e){try{c(t.next(e))}catch(e){o(e)}}function s(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(r,s)}c((t=t.apply(e,n||[])).next())}))},s=this&&this.__generator||function(e,n){var a,t,i,o,r={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;r;)try{if(a=1,t&&(i=2&o[0]?t.return:o[0]?t.throw||((i=t.return)&&i.call(t),0):t.next)&&!(i=i.call(t,o[1])).done)return i;switch(t=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,t=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(i=r.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){r=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){r.label=o[1];break}if(6===o[0]&&r.label<i[1]){r.label=i[1],i=o;break}if(i&&r.label<i[2]){r.label=i[2],r.ops.push(o);break}i[2]&&r.ops.pop(),r.trys.pop();continue}o=n.call(e,r)}catch(e){o=[6,e],t=0}finally{a=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.Order=n.PaymentStatus=n.PaymentType=n.OrderCancellationReason=n.OrderSource=n.OrderStatus=void 0;var p=c(a(6486)),u=c(a(4078)),l=a(7764),d=a(1316);Object.defineProperty(n,"OrderCancellationReason",{enumerable:!0,get:function(){return d.OrderCancellationReason}}),Object.defineProperty(n,"OrderSource",{enumerable:!0,get:function(){return d.OrderSource}}),Object.defineProperty(n,"OrderStatus",{enumerable:!0,get:function(){return d.OrderStatus}}),Object.defineProperty(n,"PaymentStatus",{enumerable:!0,get:function(){return d.PaymentStatus}}),Object.defineProperty(n,"PaymentType",{enumerable:!0,get:function(){return d.PaymentType}});var m=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return i(n,e),n.prototype.buildUrl=function(e){return(0,u.default)(n.BASE_PATH,String(e))},n.prototype.getList=function(e){return void 0===e&&(e={}),r(this,void 0,void 0,(function(){var n,a,t;return s(this,(function(i){switch(i.label){case 0:return n=e.date_to,a=e.date_from,t=o({},e),n&&(t.date_to=p.default.isDate(n)?n.toString():n),a&&(t.date_from=p.default.isDate(a)?a.toString():a),[4,this.makeRequest(l.HttpMethods.Get,this.buildUrl("list"),{},t)];case 1:return[2,i.sent().body]}}))}))},n.prototype.getById=function(e){return r(this,void 0,void 0,(function(){return s(this,(function(n){switch(n.label){case 0:return[4,this.makeRequest(l.HttpMethods.Get,this.buildUrl(e),{},{})];case 1:return[2,n.sent().body]}}))}))},n.prototype.setStatus=function(e){return r(this,void 0,void 0,(function(){return s(this,(function(n){switch(n.label){case 0:return[4,this.makeRequest(l.HttpMethods.Post,this.buildUrl("set_status"),e,{})];case 1:return[2,n.sent().body]}}))}))},n.prototype.refund=function(e){return r(this,void 0,void 0,(function(){return s(this,(function(n){switch(n.label){case 0:return[4,this.makeRequest(l.HttpMethods.Post,this.buildUrl("refund"),e,{})];case 1:return[2,n.sent().body]}}))}))},n.BASE_PATH="orders",n}(l.Request);n.Order=m},3404:function(e,n,a){"use strict";var t,i=this&&this.__extends||(t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])},t(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function a(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(a.prototype=n.prototype,new a)}),o=this&&this.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function r(e){try{c(t.next(e))}catch(e){o(e)}}function s(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(r,s)}c((t=t.apply(e,n||[])).next())}))},r=this&&this.__generator||function(e,n){var a,t,i,o,r={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;r;)try{if(a=1,t&&(i=2&o[0]?t.return:o[0]?t.throw||((i=t.return)&&i.call(t),0):t.next)&&!(i=i.call(t,o[1])).done)return i;switch(t=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,t=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(i=r.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){r=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){r.label=o[1];break}if(6===o[0]&&r.label<i[1]){r.label=i[1],i=o;break}if(i&&r.label<i[2]){r.label=i[2],r.ops.push(o);break}i[2]&&r.ops.pop(),r.trys.pop();continue}o=n.call(e,r)}catch(e){o=[6,e],t=0}finally{a=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.PaymentOption=void 0;var c=s(a(4078)),p=a(7764),u=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return i(n,e),n.prototype.buildUrl=function(e){return(0,c.default)(n.BASE_PATH,String(e))},n.prototype.getList=function(){return o(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.makeRequest(p.HttpMethods.Get,this.buildUrl("list"),{},{})];case 1:return[2,e.sent().body]}}))}))},n.BASE_PATH="payment_options",n}(p.Request);n.PaymentOption=u},6513:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ImportProductStatus=n.ProductUpdatedFields=n.MarkMissingProductAs=n.ProductDiscountType=n.ProductPresence=n.ProductSellingType=n.ProductStatus=void 0,function(e){e.OnDisplay="on_display",e.Draft="draft",e.Deleted="deleted",e.NotOnDisplay="not_on_display",e.EditingRequired="editing_required",e.ApprovalPending="approval_pending",e.DeletedByModerator="deleted_by_moderator"}(n.ProductStatus||(n.ProductStatus={})),function(e){e.Retail="retail",e.WholeSale="wholesale",e.Universal="universal",e.Service="service"}(n.ProductSellingType||(n.ProductSellingType={})),function(e){e.Available="available",e.NotAvailable="not_available",e.Order="order",e.Service="service",e.Waiting="waiting"}(n.ProductPresence||(n.ProductPresence={})),function(e){e.Amount="amount",e.Percent="percent"}(n.ProductDiscountType||(n.ProductDiscountType={})),function(e){e.None="none",e.NotAvailable="not_available",e.NotOnDisplay="not_on_display",e.Deleted="deleted"}(n.MarkMissingProductAs||(n.MarkMissingProductAs={})),function(e){e.Name="name",e.Sku="sku",e.Price="price",e.ImagesUrls="images_urls",e.Presence="presence",e.QuantityInStock="quantity_in_stock",e.Description="description",e.Group="group",e.Keywords="keywords",e.Attributes="attributes",e.Discount="discount",e.Labels="labels",e.Gtin="gtin",e.Mpn="mpn"}(n.ProductUpdatedFields||(n.ProductUpdatedFields={})),function(e){e.Success="SUCCESS",e.Partial="PARTIAL",e.Fatal="FATAL"}(n.ImportProductStatus||(n.ImportProductStatus={}))},9112:function(e,n,a){"use strict";var t,i=this&&this.__extends||(t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])},t(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function a(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(a.prototype=n.prototype,new a)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var n,a=1,t=arguments.length;a<t;a++)for(var i in n=arguments[a])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},o.apply(this,arguments)},r=this&&this.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function r(e){try{c(t.next(e))}catch(e){o(e)}}function s(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(r,s)}c((t=t.apply(e,n||[])).next())}))},s=this&&this.__generator||function(e,n){var a,t,i,o,r={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;r;)try{if(a=1,t&&(i=2&o[0]?t.return:o[0]?t.throw||((i=t.return)&&i.call(t),0):t.next)&&!(i=i.call(t,o[1])).done)return i;switch(t=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,t=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(i=r.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){r=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){r.label=o[1];break}if(6===o[0]&&r.label<i[1]){r.label=i[1],i=o;break}if(i&&r.label<i[2]){r.label=i[2],r.ops.push(o);break}i[2]&&r.ops.pop(),r.trys.pop();continue}o=n.call(e,r)}catch(e){o=[6,e],t=0}finally{a=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.Product=n.ImportProductStatus=n.ProductUpdatedFields=n.MarkMissingProductAs=n.ProductDiscountType=n.ProductPresence=n.ProductSellingType=n.ProductStatus=void 0;var p=c(a(4078)),u=a(7764),l=a(6513);Object.defineProperty(n,"ImportProductStatus",{enumerable:!0,get:function(){return l.ImportProductStatus}}),Object.defineProperty(n,"MarkMissingProductAs",{enumerable:!0,get:function(){return l.MarkMissingProductAs}}),Object.defineProperty(n,"ProductDiscountType",{enumerable:!0,get:function(){return l.ProductDiscountType}}),Object.defineProperty(n,"ProductPresence",{enumerable:!0,get:function(){return l.ProductPresence}}),Object.defineProperty(n,"ProductSellingType",{enumerable:!0,get:function(){return l.ProductSellingType}}),Object.defineProperty(n,"ProductStatus",{enumerable:!0,get:function(){return l.ProductStatus}}),Object.defineProperty(n,"ProductUpdatedFields",{enumerable:!0,get:function(){return l.ProductUpdatedFields}});var d=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return i(n,e),n.prototype.buildUrl=function(e){return(0,p.default)(n.BASE_PATH,String(e))},n.prototype.getList=function(e){return void 0===e&&(e={}),r(this,void 0,void 0,(function(){var n;return s(this,(function(a){switch(a.label){case 0:return n=o({},e),[4,this.makeRequest(u.HttpMethods.Get,this.buildUrl("list"),{},n)];case 1:return[2,a.sent().body]}}))}))},n.prototype.getById=function(e){return r(this,void 0,void 0,(function(){return s(this,(function(n){switch(n.label){case 0:return[4,this.makeRequest(u.HttpMethods.Get,this.buildUrl(e),{},{})];case 1:return[2,n.sent().body]}}))}))},n.prototype.getByExternalId=function(e){return r(this,void 0,void 0,(function(){return s(this,(function(n){switch(n.label){case 0:return[4,this.makeRequest(u.HttpMethods.Get,this.buildUrl("by_external_id/".concat(e)),{},{})];case 1:return[2,n.sent().body]}}))}))},n.prototype.edit=function(e){return r(this,void 0,void 0,(function(){return s(this,(function(n){switch(n.label){case 0:return[4,this.makeRequest(u.HttpMethods.Post,this.buildUrl("edit"),e,{})];case 1:return[2,n.sent().body]}}))}))},n.prototype.editByExternalId=function(e){return r(this,void 0,void 0,(function(){return s(this,(function(n){switch(n.label){case 0:return[4,this.makeRequest(u.HttpMethods.Post,this.buildUrl("edit_by_external_id"),e,{})];case 1:return[2,n.sent().body]}}))}))},n.prototype.importUrl=function(e){return r(this,void 0,void 0,(function(){return s(this,(function(n){switch(n.label){case 0:return[4,this.makeRequest(u.HttpMethods.Post,this.buildUrl("import_url"),e,{})];case 1:return[2,n.sent().body]}}))}))},n.prototype.getImportStatus=function(e){return r(this,void 0,void 0,(function(){return s(this,(function(n){switch(n.label){case 0:return[4,this.makeRequest(u.HttpMethods.Get,this.buildUrl("import/status/".concat(e)),{},{})];case 1:return[2,n.sent().body]}}))}))},n.BASE_PATH="products",n}(u.Request);n.Product=d},9206:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.HttpMethods=void 0,function(e){e.Get="get",e.Post="post",e.Put="put",e.Delete="delete"}(n.HttpMethods||(n.HttpMethods={}))},7764:function(e,n,a){"use strict";var t=this&&this.__assign||function(){return t=Object.assign||function(e){for(var n,a=1,t=arguments.length;a<t;a++)for(var i in n=arguments[a])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},t.apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(e,n,a,t){void 0===t&&(t=a);var i=Object.getOwnPropertyDescriptor(n,a);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[a]}}),Object.defineProperty(e,t,i)}:function(e,n,a,t){void 0===t&&(t=a),e[t]=n[a]}),o=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&i(n,e,a);return o(n,e),n},s=this&&this.__awaiter||function(e,n,a,t){return new(a||(a=Promise))((function(i,o){function r(e){try{c(t.next(e))}catch(e){o(e)}}function s(e){try{c(t.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(r,s)}c((t=t.apply(e,n||[])).next())}))},c=this&&this.__generator||function(e,n){var a,t,i,o,r={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;r;)try{if(a=1,t&&(i=2&o[0]?t.return:o[0]?t.throw||((i=t.return)&&i.call(t),0):t.next)&&!(i=i.call(t,o[1])).done)return i;switch(t=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,t=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(i=r.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){r=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){r.label=o[1];break}if(6===o[0]&&r.label<i[1]){r.label=i[1],i=o;break}if(i&&r.label<i[2]){r.label=i[2],r.ops.push(o);break}i[2]&&r.ops.pop(),r.trys.pop();continue}o=n.call(e,r)}catch(e){o=[6,e],t=0}finally{a=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},p=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.Request=n.HttpMethods=void 0;var u=p(a(6486)),l=r(a(9669)),d=p(a(4078)),m=a(9206);Object.defineProperty(n,"HttpMethods",{enumerable:!0,get:function(){return m.HttpMethods}});var f=a(9837),v=function(){function e(e){var n=e.token,a=e.config;this.token=n,this.config=null!=a?a:{}}return e.prototype.getToken=function(){return this.token},e.prototype.getConfig=function(){return this.config},e.prototype.setConfig=function(e){return this.config=e,this},e.prototype.mergeConfig=function(e){return u.default.merge(this.config,e),this},e.prototype.setToken=function(e){return this.token=e,this},e.prototype.makeRequest=function(n,a,i,o){return s(this,void 0,void 0,(function(){var r,s,p,u;return c(this,(function(c){switch(c.label){case 0:r=(0,d.default)(e.API_VERSION,a),c.label=1;case 1:return c.trys.push([1,3,,4]),[4,(0,l.default)(t(t({},this.config),{method:n,data:null!=i?i:{},params:null!=o?o:{},baseURL:"".concat(e.HOST,":").concat(e.PORT),url:r,responseType:"json",headers:{Authorization:"Bearer ".concat(this.token)},maxContentLength:1/0,maxBodyLength:1/0}))];case 2:if(s=c.sent(),e.isErrorCase(s))throw new f.PromAPIError(s);return[2,{response:s,body:s.data}];case 3:if((p=c.sent())instanceof l.AxiosError&&p.response)throw u=p,new f.AxiosExtendedError(u);throw p;case 4:return[2]}}))}))},e.isErrorCase=function(e){var n=f.PromAPIError.getErrorType(e.data);return Boolean(n)},e.HOST="https://my.prom.ua",e.API_VERSION="/api/v1",e.PORT=443,e}();n.Request=v},8351:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.DeliveryType=n.DeliveryProvider=void 0,function(e){e.NovaPoshta="nova_poshta",e.Justin="justin",e.DeliveryAuto="delivery_auto",e.UkrPoshta="ukrposhta",e.Meest="meest"}(n.DeliveryProvider||(n.DeliveryProvider={})),function(e){e.W2W="W2W",e.W2D="W2D",e.D2W="D2W",e.D2D="D2D"}(n.DeliveryType||(n.DeliveryType={}))},6409:(e,n,a)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.DeliveryProvider=n.DeliveryType=void 0;var t=a(8351);Object.defineProperty(n,"DeliveryType",{enumerable:!0,get:function(){return t.DeliveryType}}),Object.defineProperty(n,"DeliveryProvider",{enumerable:!0,get:function(){return t.DeliveryProvider}})},1073:function(e,n,a){"use strict";var t=this&&this.__createBinding||(Object.create?function(e,n,a,t){void 0===t&&(t=a);var i=Object.getOwnPropertyDescriptor(n,a);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[a]}}),Object.defineProperty(e,t,i)}:function(e,n,a,t){void 0===t&&(t=a),e[t]=n[a]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&t(n,e,a);return i(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.LibErrors=n.Types=n.Request=n.Product=n.PaymentOption=n.Order=n.Group=n.Delivery=n.Client=void 0;var r=o(a(3879));n.Client=r;var s=o(a(8049));n.Delivery=s;var c=o(a(4370));n.Group=c;var p=o(a(3450));n.Order=p;var u=o(a(3404));n.PaymentOption=u;var l=o(a(9112));n.Product=l;var d=o(a(7764));n.Request=d;var m=o(a(6409));n.Types=m;var f=o(a(9837));n.LibErrors=f;var v=function(){function e(){}return e.Client=r.Client,e.Delivery=s.Delivery,e.Group=c.Group,e.Order=p.Order,e.PaymentOption=u.PaymentOption,e.Product=l.Product,e.Request=d.Request,e.Types=m,e.AxiosExtendedError=f.AxiosExtendedError,e.PromAPIError=f.PromAPIError,e}();n.default=v},9779:(e,n,a)=>{var t=a(3837),i=a(2781).Stream,o=a(3463);function r(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null,this._insideLoop=!1,this._pendingNext=!1}e.exports=r,t.inherits(r,i),r.create=function(e){var n=new this;for(var a in e=e||{})n[a]=e[a];return n},r.isStreamLike=function(e){return"function"!=typeof e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e&&!Buffer.isBuffer(e)},r.prototype.append=function(e){if(r.isStreamLike(e)){if(!(e instanceof o)){var n=o.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=n}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},r.prototype.pipe=function(e,n){return i.prototype.pipe.call(this,e,n),this.resume(),e},r.prototype._getNext=function(){if(this._currentStream=null,this._insideLoop)this._pendingNext=!0;else{this._insideLoop=!0;try{do{this._pendingNext=!1,this._realGetNext()}while(this._pendingNext)}finally{this._insideLoop=!1}}},r.prototype._realGetNext=function(){var e=this._streams.shift();void 0!==e?"function"==typeof e?e(function(e){r.isStreamLike(e)&&(e.on("data",this._checkDataSize.bind(this)),this._handleErrors(e)),this._pipeNext(e)}.bind(this)):this._pipeNext(e):this.end()},r.prototype._pipeNext=function(e){if(this._currentStream=e,r.isStreamLike(e))return e.on("end",this._getNext.bind(this)),void e.pipe(this,{end:!1});var n=e;this.write(n),this._getNext()},r.prototype._handleErrors=function(e){var n=this;e.on("error",(function(e){n._emitError(e)}))},r.prototype.write=function(e){this.emit("data",e)},r.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit("pause"))},r.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit("resume")},r.prototype.end=function(){this._reset(),this.emit("end")},r.prototype.destroy=function(){this._reset(),this.emit("close")},r.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},r.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}},r.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach((function(n){n.dataSize&&(e.dataSize+=n.dataSize)})),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},r.prototype._emitError=function(e){this._reset(),this.emit("error",e)}},1227:(e,n,a)=>{n.formatArgs=function(n){if(n[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+n[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const a="color: "+this.color;n.splice(1,0,a,"color: inherit");let t=0,i=0;n[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(t++,"%c"===e&&(i=t))})),n.splice(i,0,a)},n.save=function(e){try{e?n.storage.setItem("debug",e):n.storage.removeItem("debug")}catch(e){}},n.load=function(){let e;try{e=n.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG);return e},n.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},n.storage=function(){try{return localStorage}catch(e){}}(),n.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),n.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],n.log=console.debug||console.log||(()=>{}),e.exports=a(2447)(n);const{formatters:t}=e.exports;t.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},2447:(e,n,a)=>{e.exports=function(e){function n(e){let a,i,o,r=null;function s(...e){if(!s.enabled)return;const t=s,i=Number(new Date),o=i-(a||i);t.diff=o,t.prev=a,t.curr=i,a=i,e[0]=n.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let r=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((a,i)=>{if("%%"===a)return"%";r++;const o=n.formatters[i];if("function"==typeof o){const n=e[r];a=o.call(t,n),e.splice(r,1),r--}return a})),n.formatArgs.call(t,e);(t.log||n.log).apply(t,e)}return s.namespace=e,s.useColors=n.useColors(),s.color=n.selectColor(e),s.extend=t,s.destroy=n.destroy,Object.defineProperty(s,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==r?r:(i!==n.namespaces&&(i=n.namespaces,o=n.enabled(e)),o),set:e=>{r=e}}),"function"==typeof n.init&&n.init(s),s}function t(e,a){const t=n(this.namespace+(void 0===a?":":a)+e);return t.log=this.log,t}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},n.disable=function(){const e=[...n.names.map(i),...n.skips.map(i).map((e=>"-"+e))].join(",");return n.enable(""),e},n.enable=function(e){let a;n.save(e),n.namespaces=e,n.names=[],n.skips=[];const t=("string"==typeof e?e:"").split(/[\s,]+/),i=t.length;for(a=0;a<i;a++)t[a]&&("-"===(e=t[a].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.slice(1)+"$")):n.names.push(new RegExp("^"+e+"$")))},n.enabled=function(e){if("*"===e[e.length-1])return!0;let a,t;for(a=0,t=n.skips.length;a<t;a++)if(n.skips[a].test(e))return!1;for(a=0,t=n.names.length;a<t;a++)if(n.names[a].test(e))return!0;return!1},n.humanize=a(7824),n.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((a=>{n[a]=e[a]})),n.names=[],n.skips=[],n.formatters={},n.selectColor=function(e){let a=0;for(let n=0;n<e.length;n++)a=(a<<5)-a+e.charCodeAt(n),a|=0;return n.colors[Math.abs(a)%n.colors.length]},n.enable(n.load()),n}},5158:(e,n,a)=>{"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=a(1227):e.exports=a(39)},39:(e,n,a)=>{const t=a(6224),i=a(3837);n.init=function(e){e.inspectOpts={};const a=Object.keys(n.inspectOpts);for(let t=0;t<a.length;t++)e.inspectOpts[a[t]]=n.inspectOpts[a[t]]},n.log=function(...e){return process.stderr.write(i.format(...e)+"\n")},n.formatArgs=function(a){const{namespace:t,useColors:i}=this;if(i){const n=this.color,i="[3"+(n<8?n:"8;5;"+n),o=`  ${i};1m${t} [0m`;a[0]=o+a[0].split("\n").join("\n"+o),a.push(i+"m+"+e.exports.humanize(this.diff)+"[0m")}else a[0]=function(){if(n.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+t+" "+a[0]},n.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},n.load=function(){return process.env.DEBUG},n.useColors=function(){return"colors"in n.inspectOpts?Boolean(n.inspectOpts.colors):t.isatty(process.stderr.fd)},n.destroy=i.deprecate((()=>{}),"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),n.colors=[6,2,3,4,5,1];try{const e=a(2130);e&&(e.stderr||e).level>=2&&(n.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}n.inspectOpts=Object.keys(process.env).filter((e=>/^debug_/i.test(e))).reduce(((e,n)=>{const a=n.substring(6).toLowerCase().replace(/_([a-z])/g,((e,n)=>n.toUpperCase()));let t=process.env[n];return t=!!/^(yes|on|true|enabled)$/i.test(t)||!/^(no|off|false|disabled)$/i.test(t)&&("null"===t?null:Number(t)),e[a]=t,e}),{}),e.exports=a(2447)(n);const{formatters:o}=e.exports;o.o=function(e){return this.inspectOpts.colors=this.useColors,i.inspect(e,this.inspectOpts).split("\n").map((e=>e.trim())).join(" ")},o.O=function(e){return this.inspectOpts.colors=this.useColors,i.inspect(e,this.inspectOpts)}},3463:(e,n,a)=>{var t=a(2781).Stream,i=a(3837);function o(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}e.exports=o,i.inherits(o,t),o.create=function(e,n){var a=new this;for(var t in n=n||{})a[t]=n[t];a.source=e;var i=e.emit;return e.emit=function(){return a._handleEmit(arguments),i.apply(e,arguments)},e.on("error",(function(){})),a.pauseStream&&e.pause(),a},Object.defineProperty(o.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),o.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},o.prototype.resume=function(){this._released||this.release(),this.source.resume()},o.prototype.pause=function(){this.source.pause()},o.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},o.prototype.pipe=function(){var e=t.prototype.pipe.apply(this,arguments);return this.resume(),e},o.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):("data"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},o.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}}},2261:(e,n,a)=>{var t;e.exports=function(){if(!t){try{t=a(5158)("follow-redirects")}catch(e){}"function"!=typeof t&&(t=function(){})}t.apply(null,arguments)}},938:(e,n,a)=>{var t=a(7310),i=t.URL,o=a(3685),r=a(5687),s=a(2781).Writable,c=a(9491),p=a(2261),u=["abort","aborted","connect","error","socket","timeout"],l=Object.create(null);u.forEach((function(e){l[e]=function(n,a,t){this._redirectable.emit(e,n,a,t)}}));var d=_("ERR_FR_REDIRECTION_FAILURE","Redirected request failed"),m=_("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded"),f=_("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),v=_("ERR_STREAM_WRITE_AFTER_END","write after end");function x(e,n){s.call(this),this._sanitizeOptions(e),this._options=e,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],n&&this.on("response",n);var a=this;this._onNativeResponse=function(e){a._processResponse(e)},this._performRequest()}function h(e){var n={maxRedirects:21,maxBodyLength:10485760},a={};return Object.keys(e).forEach((function(o){var r=o+":",s=a[r]=e[o],u=n[o]=Object.create(s);Object.defineProperties(u,{request:{value:function(e,o,s){if("string"==typeof e){var u=e;try{e=g(new i(u))}catch(n){e=t.parse(u)}}else i&&e instanceof i?e=g(e):(s=o,o=e,e={protocol:r});return"function"==typeof o&&(s=o,o=null),(o=Object.assign({maxRedirects:n.maxRedirects,maxBodyLength:n.maxBodyLength},e,o)).nativeProtocols=a,c.equal(o.protocol,r,"protocol mismatch"),p("options",o),new x(o,s)},configurable:!0,enumerable:!0,writable:!0},get:{value:function(e,n,a){var t=u.request(e,n,a);return t.end(),t},configurable:!0,enumerable:!0,writable:!0}})})),n}function b(){}function g(e){var n={protocol:e.protocol,hostname:e.hostname.startsWith("[")?e.hostname.slice(1,-1):e.hostname,hash:e.hash,search:e.search,pathname:e.pathname,path:e.pathname+e.search,href:e.href};return""!==e.port&&(n.port=Number(e.port)),n}function y(e,n){var a;for(var t in n)e.test(t)&&(a=n[t],delete n[t]);return null==a?void 0:String(a).trim()}function _(e,n){function a(e){Error.captureStackTrace(this,this.constructor),e?(this.message=n+": "+e.message,this.cause=e):this.message=n}return a.prototype=new Error,a.prototype.constructor=a,a.prototype.name="Error ["+e+"]",a.prototype.code=e,a}function w(e){for(var n of u)e.removeListener(n,l[n]);e.on("error",b),e.abort()}x.prototype=Object.create(s.prototype),x.prototype.abort=function(){w(this._currentRequest),this.emit("abort")},x.prototype.write=function(e,n,a){if(this._ending)throw new v;if(!("string"==typeof e||"object"==typeof e&&"length"in e))throw new TypeError("data should be a string, Buffer or Uint8Array");"function"==typeof n&&(a=n,n=null),0!==e.length?this._requestBodyLength+e.length<=this._options.maxBodyLength?(this._requestBodyLength+=e.length,this._requestBodyBuffers.push({data:e,encoding:n}),this._currentRequest.write(e,n,a)):(this.emit("error",new f),this.abort()):a&&a()},x.prototype.end=function(e,n,a){if("function"==typeof e?(a=e,e=n=null):"function"==typeof n&&(a=n,n=null),e){var t=this,i=this._currentRequest;this.write(e,n,(function(){t._ended=!0,i.end(null,null,a)})),this._ending=!0}else this._ended=this._ending=!0,this._currentRequest.end(null,null,a)},x.prototype.setHeader=function(e,n){this._options.headers[e]=n,this._currentRequest.setHeader(e,n)},x.prototype.removeHeader=function(e){delete this._options.headers[e],this._currentRequest.removeHeader(e)},x.prototype.setTimeout=function(e,n){var a=this;function t(n){n.setTimeout(e),n.removeListener("timeout",n.destroy),n.addListener("timeout",n.destroy)}function i(n){a._timeout&&clearTimeout(a._timeout),a._timeout=setTimeout((function(){a.emit("timeout"),o()}),e),t(n)}function o(){a._timeout&&(clearTimeout(a._timeout),a._timeout=null),a.removeListener("abort",o),a.removeListener("error",o),a.removeListener("response",o),n&&a.removeListener("timeout",n),a.socket||a._currentRequest.removeListener("socket",i)}return n&&this.on("timeout",n),this.socket?i(this.socket):this._currentRequest.once("socket",i),this.on("socket",t),this.on("abort",o),this.on("error",o),this.on("response",o),this},["flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach((function(e){x.prototype[e]=function(n,a){return this._currentRequest[e](n,a)}})),["aborted","connection","socket"].forEach((function(e){Object.defineProperty(x.prototype,e,{get:function(){return this._currentRequest[e]}})})),x.prototype._sanitizeOptions=function(e){if(e.headers||(e.headers={}),e.host&&(e.hostname||(e.hostname=e.host),delete e.host),!e.pathname&&e.path){var n=e.path.indexOf("?");n<0?e.pathname=e.path:(e.pathname=e.path.substring(0,n),e.search=e.path.substring(n))}},x.prototype._performRequest=function(){var e=this._options.protocol,n=this._options.nativeProtocols[e];if(n){if(this._options.agents){var a=e.slice(0,-1);this._options.agent=this._options.agents[a]}var i=this._currentRequest=n.request(this._options,this._onNativeResponse);for(var o of(i._redirectable=this,u))i.on(o,l[o]);if(this._currentUrl=/^\//.test(this._options.path)?t.format(this._options):this._currentUrl=this._options.path,this._isRedirect){var r=0,s=this,c=this._requestBodyBuffers;!function e(n){if(i===s._currentRequest)if(n)s.emit("error",n);else if(r<c.length){var a=c[r++];i.finished||i.write(a.data,a.encoding,e)}else s._ended&&i.end()}()}}else this.emit("error",new TypeError("Unsupported protocol "+e))},x.prototype._processResponse=function(e){var n=e.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:e.headers,statusCode:n});var a=e.headers.location;if(!a||!1===this._options.followRedirects||n<300||n>=400)return e.responseUrl=this._currentUrl,e.redirects=this._redirects,this.emit("response",e),void(this._requestBodyBuffers=[]);if(w(this._currentRequest),e.destroy(),++this._redirectCount>this._options.maxRedirects)this.emit("error",new m);else{var i,o=this._options.beforeRedirect;o&&(i=Object.assign({Host:e.req.getHeader("host")},this._options.headers));var r=this._options.method;((301===n||302===n)&&"POST"===this._options.method||303===n&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],y(/^content-/i,this._options.headers));var s,c=y(/^host$/i,this._options.headers),u=t.parse(this._currentUrl),l=c||u.host,f=/^\w+:/.test(a)?this._currentUrl:t.format(Object.assign(u,{host:l}));try{s=t.resolve(f,a)}catch(e){return void this.emit("error",new d(e))}p("redirecting to",s),this._isRedirect=!0;var v=t.parse(s);if(Object.assign(this._options,v),(v.protocol!==u.protocol&&"https:"!==v.protocol||v.host!==l&&!function(e,n){const a=e.length-n.length-1;return a>0&&"."===e[a]&&e.endsWith(n)}(v.host,l))&&y(/^(?:authorization|cookie)$/i,this._options.headers),"function"==typeof o){var x={headers:e.headers,statusCode:n},h={url:f,method:r,headers:i};try{o(this._options,x,h)}catch(e){return void this.emit("error",e)}this._sanitizeOptions(this._options)}try{this._performRequest()}catch(e){this.emit("error",new d(e))}}},e.exports=h({http:o,https:r}),e.exports.wrap=h},6882:(e,n,a)=>{var t=a(9779),i=a(3837),o=a(1017),r=a(3685),s=a(5687),c=a(7310).parse,p=a(7147),u=a(2781).Stream,l=a(983),d=a(9118),m=a(2275);function f(e){if(!(this instanceof f))return new f(e);for(var n in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],t.call(this),e=e||{})this[n]=e[n]}e.exports=f,i.inherits(f,t),f.LINE_BREAK="\r\n",f.DEFAULT_CONTENT_TYPE="application/octet-stream",f.prototype.append=function(e,n,a){"string"==typeof(a=a||{})&&(a={filename:a});var o=t.prototype.append.bind(this);if("number"==typeof n&&(n=""+n),i.isArray(n))this._error(new Error("Arrays are not supported."));else{var r=this._multiPartHeader(e,n,a),s=this._multiPartFooter();o(r),o(n),o(s),this._trackLength(r,n,a)}},f.prototype._trackLength=function(e,n,a){var t=0;null!=a.knownLength?t+=+a.knownLength:Buffer.isBuffer(n)?t=n.length:"string"==typeof n&&(t=Buffer.byteLength(n)),this._valueLength+=t,this._overheadLength+=Buffer.byteLength(e)+f.LINE_BREAK.length,n&&(n.path||n.readable&&n.hasOwnProperty("httpVersion")||n instanceof u)&&(a.knownLength||this._valuesToMeasure.push(n))},f.prototype._lengthRetriever=function(e,n){e.hasOwnProperty("fd")?null!=e.end&&e.end!=1/0&&null!=e.start?n(null,e.end+1-(e.start?e.start:0)):p.stat(e.path,(function(a,t){var i;a?n(a):(i=t.size-(e.start?e.start:0),n(null,i))})):e.hasOwnProperty("httpVersion")?n(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",(function(a){e.pause(),n(null,+a.headers["content-length"])})),e.resume()):n("Unknown stream")},f.prototype._multiPartHeader=function(e,n,a){if("string"==typeof a.header)return a.header;var t,i=this._getContentDisposition(n,a),o=this._getContentType(n,a),r="",s={"Content-Disposition":["form-data",'name="'+e+'"'].concat(i||[]),"Content-Type":[].concat(o||[])};for(var c in"object"==typeof a.header&&m(s,a.header),s)s.hasOwnProperty(c)&&null!=(t=s[c])&&(Array.isArray(t)||(t=[t]),t.length&&(r+=c+": "+t.join("; ")+f.LINE_BREAK));return"--"+this.getBoundary()+f.LINE_BREAK+r+f.LINE_BREAK},f.prototype._getContentDisposition=function(e,n){var a,t;return"string"==typeof n.filepath?a=o.normalize(n.filepath).replace(/\\/g,"/"):n.filename||e.name||e.path?a=o.basename(n.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(a=o.basename(e.client._httpMessage.path||"")),a&&(t='filename="'+a+'"'),t},f.prototype._getContentType=function(e,n){var a=n.contentType;return!a&&e.name&&(a=l.lookup(e.name)),!a&&e.path&&(a=l.lookup(e.path)),!a&&e.readable&&e.hasOwnProperty("httpVersion")&&(a=e.headers["content-type"]),a||!n.filepath&&!n.filename||(a=l.lookup(n.filepath||n.filename)),a||"object"!=typeof e||(a=f.DEFAULT_CONTENT_TYPE),a},f.prototype._multiPartFooter=function(){return function(e){var n=f.LINE_BREAK;0===this._streams.length&&(n+=this._lastBoundary()),e(n)}.bind(this)},f.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+f.LINE_BREAK},f.prototype.getHeaders=function(e){var n,a={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(n in e)e.hasOwnProperty(n)&&(a[n.toLowerCase()]=e[n]);return a},f.prototype.setBoundary=function(e){this._boundary=e},f.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},f.prototype.getBuffer=function(){for(var e=new Buffer.alloc(0),n=this.getBoundary(),a=0,t=this._streams.length;a<t;a++)"function"!=typeof this._streams[a]&&(e=Buffer.isBuffer(this._streams[a])?Buffer.concat([e,this._streams[a]]):Buffer.concat([e,Buffer.from(this._streams[a])]),"string"==typeof this._streams[a]&&this._streams[a].substring(2,n.length+2)===n||(e=Buffer.concat([e,Buffer.from(f.LINE_BREAK)])));return Buffer.concat([e,Buffer.from(this._lastBoundary())])},f.prototype._generateBoundary=function(){for(var e="--------------------------",n=0;n<24;n++)e+=Math.floor(10*Math.random()).toString(16);this._boundary=e},f.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e},f.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},f.prototype.getLength=function(e){var n=this._overheadLength+this._valueLength;this._streams.length&&(n+=this._lastBoundary().length),this._valuesToMeasure.length?d.parallel(this._valuesToMeasure,this._lengthRetriever,(function(a,t){a?e(a):(t.forEach((function(e){n+=e})),e(null,n))})):process.nextTick(e.bind(this,null,n))},f.prototype.submit=function(e,n){var a,t,i={method:"post"};return"string"==typeof e?(e=c(e),t=m({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},i)):(t=m(e,i)).port||(t.port="https:"==t.protocol?443:80),t.headers=this.getHeaders(e.headers),a="https:"==t.protocol?s.request(t):r.request(t),this.getLength(function(e,t){if(e&&"Unknown stream"!==e)this._error(e);else if(t&&a.setHeader("Content-Length",t),this.pipe(a),n){var i,o=function(e,t){return a.removeListener("error",o),a.removeListener("response",i),n.call(this,e,t)};i=o.bind(this,null),a.on("error",o),a.on("response",i)}}.bind(this)),a},f.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))},f.prototype.toString=function(){return"[object FormData]"}},2275:e=>{e.exports=function(e,n){return Object.keys(n).forEach((function(a){e[a]=e[a]||n[a]})),e}},6560:e=>{"use strict";e.exports=(e,n=process.argv)=>{const a=e.startsWith("-")?"":1===e.length?"-":"--",t=n.indexOf(a+e),i=n.indexOf("--");return-1!==t&&(-1===i||t<i)}},6486:function(e,n,a){var t;e=a.nmd(e),function(){var i,o="Expected a function",r="__lodash_hash_undefined__",s="__lodash_placeholder__",c=16,p=32,u=64,l=128,d=256,m=1/0,f=9007199254740991,v=NaN,x=4294967295,h=[["ary",l],["bind",1],["bindKey",2],["curry",8],["curryRight",c],["flip",512],["partial",p],["partialRight",u],["rearg",d]],b="[object Arguments]",g="[object Array]",y="[object Boolean]",_="[object Date]",w="[object Error]",j="[object Function]",k="[object GeneratorFunction]",E="[object Map]",O="[object Number]",P="[object Object]",R="[object Promise]",C="[object RegExp]",S="[object Set]",A="[object String]",T="[object Symbol]",z="[object WeakMap]",q="[object ArrayBuffer]",D="[object DataView]",L="[object Float32Array]",B="[object Float64Array]",U="[object Int8Array]",F="[object Int16Array]",I="[object Int32Array]",M="[object Uint8Array]",N="[object Uint8ClampedArray]",H="[object Uint16Array]",W="[object Uint32Array]",$=/\b__p \+= '';/g,G=/\b(__p \+=) '' \+/g,V=/(__e\(.*?\)|\b__t\)) \+\n'';/g,K=/&(?:amp|lt|gt|quot|#39);/g,J=/[&<>"']/g,Y=RegExp(K.source),Z=RegExp(J.source),X=/<%-([\s\S]+?)%>/g,Q=/<%([\s\S]+?)%>/g,ee=/<%=([\s\S]+?)%>/g,ne=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,ae=/^\w*$/,te=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ie=/[\\^$.*+?()[\]{}|]/g,oe=RegExp(ie.source),re=/^\s+/,se=/\s/,ce=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,pe=/\{\n\/\* \[wrapped with (.+)\] \*/,ue=/,? & /,le=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,de=/[()=,{}\[\]\/\s]/,me=/\\(\\)?/g,fe=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ve=/\w*$/,xe=/^[-+]0x[0-9a-f]+$/i,he=/^0b[01]+$/i,be=/^\[object .+?Constructor\]$/,ge=/^0o[0-7]+$/i,ye=/^(?:0|[1-9]\d*)$/,_e=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,we=/($^)/,je=/['\n\r\u2028\u2029\\]/g,ke="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ee="\\u2700-\\u27bf",Oe="a-z\\xdf-\\xf6\\xf8-\\xff",Pe="A-Z\\xc0-\\xd6\\xd8-\\xde",Re="\\ufe0e\\ufe0f",Ce="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Se="['’]",Ae="[\\ud800-\\udfff]",Te="["+Ce+"]",ze="["+ke+"]",qe="\\d+",De="[\\u2700-\\u27bf]",Le="["+Oe+"]",Be="[^\\ud800-\\udfff"+Ce+qe+Ee+Oe+Pe+"]",Ue="\\ud83c[\\udffb-\\udfff]",Fe="[^\\ud800-\\udfff]",Ie="(?:\\ud83c[\\udde6-\\uddff]){2}",Me="[\\ud800-\\udbff][\\udc00-\\udfff]",Ne="["+Pe+"]",He="(?:"+Le+"|"+Be+")",We="(?:"+Ne+"|"+Be+")",$e="(?:['’](?:d|ll|m|re|s|t|ve))?",Ge="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ve="(?:"+ze+"|"+Ue+")"+"?",Ke="[\\ufe0e\\ufe0f]?",Je=Ke+Ve+("(?:\\u200d(?:"+[Fe,Ie,Me].join("|")+")"+Ke+Ve+")*"),Ye="(?:"+[De,Ie,Me].join("|")+")"+Je,Ze="(?:"+[Fe+ze+"?",ze,Ie,Me,Ae].join("|")+")",Xe=RegExp(Se,"g"),Qe=RegExp(ze,"g"),en=RegExp(Ue+"(?="+Ue+")|"+Ze+Je,"g"),nn=RegExp([Ne+"?"+Le+"+"+$e+"(?="+[Te,Ne,"$"].join("|")+")",We+"+"+Ge+"(?="+[Te,Ne+He,"$"].join("|")+")",Ne+"?"+He+"+"+$e,Ne+"+"+Ge,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",qe,Ye].join("|"),"g"),an=RegExp("[\\u200d\\ud800-\\udfff"+ke+Re+"]"),tn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,on=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],rn=-1,sn={};sn[L]=sn[B]=sn[U]=sn[F]=sn[I]=sn[M]=sn[N]=sn[H]=sn[W]=!0,sn[b]=sn[g]=sn[q]=sn[y]=sn[D]=sn[_]=sn[w]=sn[j]=sn[E]=sn[O]=sn[P]=sn[C]=sn[S]=sn[A]=sn[z]=!1;var cn={};cn[b]=cn[g]=cn[q]=cn[D]=cn[y]=cn[_]=cn[L]=cn[B]=cn[U]=cn[F]=cn[I]=cn[E]=cn[O]=cn[P]=cn[C]=cn[S]=cn[A]=cn[T]=cn[M]=cn[N]=cn[H]=cn[W]=!0,cn[w]=cn[j]=cn[z]=!1;var pn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},un=parseFloat,ln=parseInt,dn="object"==typeof global&&global&&global.Object===Object&&global,mn="object"==typeof self&&self&&self.Object===Object&&self,fn=dn||mn||Function("return this")(),vn=n&&!n.nodeType&&n,xn=vn&&e&&!e.nodeType&&e,hn=xn&&xn.exports===vn,bn=hn&&dn.process,gn=function(){try{var e=xn&&xn.require&&xn.require("util").types;return e||bn&&bn.binding&&bn.binding("util")}catch(e){}}(),yn=gn&&gn.isArrayBuffer,_n=gn&&gn.isDate,wn=gn&&gn.isMap,jn=gn&&gn.isRegExp,kn=gn&&gn.isSet,En=gn&&gn.isTypedArray;function On(e,n,a){switch(a.length){case 0:return e.call(n);case 1:return e.call(n,a[0]);case 2:return e.call(n,a[0],a[1]);case 3:return e.call(n,a[0],a[1],a[2])}return e.apply(n,a)}function Pn(e,n,a,t){for(var i=-1,o=null==e?0:e.length;++i<o;){var r=e[i];n(t,r,a(r),e)}return t}function Rn(e,n){for(var a=-1,t=null==e?0:e.length;++a<t&&!1!==n(e[a],a,e););return e}function Cn(e,n){for(var a=null==e?0:e.length;a--&&!1!==n(e[a],a,e););return e}function Sn(e,n){for(var a=-1,t=null==e?0:e.length;++a<t;)if(!n(e[a],a,e))return!1;return!0}function An(e,n){for(var a=-1,t=null==e?0:e.length,i=0,o=[];++a<t;){var r=e[a];n(r,a,e)&&(o[i++]=r)}return o}function Tn(e,n){return!!(null==e?0:e.length)&&Nn(e,n,0)>-1}function zn(e,n,a){for(var t=-1,i=null==e?0:e.length;++t<i;)if(a(n,e[t]))return!0;return!1}function qn(e,n){for(var a=-1,t=null==e?0:e.length,i=Array(t);++a<t;)i[a]=n(e[a],a,e);return i}function Dn(e,n){for(var a=-1,t=n.length,i=e.length;++a<t;)e[i+a]=n[a];return e}function Ln(e,n,a,t){var i=-1,o=null==e?0:e.length;for(t&&o&&(a=e[++i]);++i<o;)a=n(a,e[i],i,e);return a}function Bn(e,n,a,t){var i=null==e?0:e.length;for(t&&i&&(a=e[--i]);i--;)a=n(a,e[i],i,e);return a}function Un(e,n){for(var a=-1,t=null==e?0:e.length;++a<t;)if(n(e[a],a,e))return!0;return!1}var Fn=Gn("length");function In(e,n,a){var t;return a(e,(function(e,a,i){if(n(e,a,i))return t=a,!1})),t}function Mn(e,n,a,t){for(var i=e.length,o=a+(t?1:-1);t?o--:++o<i;)if(n(e[o],o,e))return o;return-1}function Nn(e,n,a){return n==n?function(e,n,a){var t=a-1,i=e.length;for(;++t<i;)if(e[t]===n)return t;return-1}(e,n,a):Mn(e,Wn,a)}function Hn(e,n,a,t){for(var i=a-1,o=e.length;++i<o;)if(t(e[i],n))return i;return-1}function Wn(e){return e!=e}function $n(e,n){var a=null==e?0:e.length;return a?Jn(e,n)/a:v}function Gn(e){return function(n){return null==n?i:n[e]}}function Vn(e){return function(n){return null==e?i:e[n]}}function Kn(e,n,a,t,i){return i(e,(function(e,i,o){a=t?(t=!1,e):n(a,e,i,o)})),a}function Jn(e,n){for(var a,t=-1,o=e.length;++t<o;){var r=n(e[t]);r!==i&&(a=a===i?r:a+r)}return a}function Yn(e,n){for(var a=-1,t=Array(e);++a<e;)t[a]=n(a);return t}function Zn(e){return e?e.slice(0,va(e)+1).replace(re,""):e}function Xn(e){return function(n){return e(n)}}function Qn(e,n){return qn(n,(function(n){return e[n]}))}function ea(e,n){return e.has(n)}function na(e,n){for(var a=-1,t=e.length;++a<t&&Nn(n,e[a],0)>-1;);return a}function aa(e,n){for(var a=e.length;a--&&Nn(n,e[a],0)>-1;);return a}function ta(e,n){for(var a=e.length,t=0;a--;)e[a]===n&&++t;return t}var ia=Vn({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),oa=Vn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function ra(e){return"\\"+pn[e]}function sa(e){return an.test(e)}function ca(e){var n=-1,a=Array(e.size);return e.forEach((function(e,t){a[++n]=[t,e]})),a}function pa(e,n){return function(a){return e(n(a))}}function ua(e,n){for(var a=-1,t=e.length,i=0,o=[];++a<t;){var r=e[a];r!==n&&r!==s||(e[a]=s,o[i++]=a)}return o}function la(e){var n=-1,a=Array(e.size);return e.forEach((function(e){a[++n]=e})),a}function da(e){var n=-1,a=Array(e.size);return e.forEach((function(e){a[++n]=[e,e]})),a}function ma(e){return sa(e)?function(e){var n=en.lastIndex=0;for(;en.test(e);)++n;return n}(e):Fn(e)}function fa(e){return sa(e)?function(e){return e.match(en)||[]}(e):function(e){return e.split("")}(e)}function va(e){for(var n=e.length;n--&&se.test(e.charAt(n)););return n}var xa=Vn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var ha=function e(n){var a,t=(n=null==n?fn:ha.defaults(fn.Object(),n,ha.pick(fn,on))).Array,se=n.Date,ke=n.Error,Ee=n.Function,Oe=n.Math,Pe=n.Object,Re=n.RegExp,Ce=n.String,Se=n.TypeError,Ae=t.prototype,Te=Ee.prototype,ze=Pe.prototype,qe=n["__core-js_shared__"],De=Te.toString,Le=ze.hasOwnProperty,Be=0,Ue=(a=/[^.]+$/.exec(qe&&qe.keys&&qe.keys.IE_PROTO||""))?"Symbol(src)_1."+a:"",Fe=ze.toString,Ie=De.call(Pe),Me=fn._,Ne=Re("^"+De.call(Le).replace(ie,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),He=hn?n.Buffer:i,We=n.Symbol,$e=n.Uint8Array,Ge=He?He.allocUnsafe:i,Ve=pa(Pe.getPrototypeOf,Pe),Ke=Pe.create,Je=ze.propertyIsEnumerable,Ye=Ae.splice,Ze=We?We.isConcatSpreadable:i,en=We?We.iterator:i,an=We?We.toStringTag:i,pn=function(){try{var e=fo(Pe,"defineProperty");return e({},"",{}),e}catch(e){}}(),dn=n.clearTimeout!==fn.clearTimeout&&n.clearTimeout,mn=se&&se.now!==fn.Date.now&&se.now,vn=n.setTimeout!==fn.setTimeout&&n.setTimeout,xn=Oe.ceil,bn=Oe.floor,gn=Pe.getOwnPropertySymbols,Fn=He?He.isBuffer:i,Vn=n.isFinite,ba=Ae.join,ga=pa(Pe.keys,Pe),ya=Oe.max,_a=Oe.min,wa=se.now,ja=n.parseInt,ka=Oe.random,Ea=Ae.reverse,Oa=fo(n,"DataView"),Pa=fo(n,"Map"),Ra=fo(n,"Promise"),Ca=fo(n,"Set"),Sa=fo(n,"WeakMap"),Aa=fo(Pe,"create"),Ta=Sa&&new Sa,za={},qa=Mo(Oa),Da=Mo(Pa),La=Mo(Ra),Ba=Mo(Ca),Ua=Mo(Sa),Fa=We?We.prototype:i,Ia=Fa?Fa.valueOf:i,Ma=Fa?Fa.toString:i;function Na(e){if(is(e)&&!Vr(e)&&!(e instanceof Ga)){if(e instanceof $a)return e;if(Le.call(e,"__wrapped__"))return No(e)}return new $a(e)}var Ha=function(){function e(){}return function(n){if(!ts(n))return{};if(Ke)return Ke(n);e.prototype=n;var a=new e;return e.prototype=i,a}}();function Wa(){}function $a(e,n){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=i}function Ga(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=x,this.__views__=[]}function Va(e){var n=-1,a=null==e?0:e.length;for(this.clear();++n<a;){var t=e[n];this.set(t[0],t[1])}}function Ka(e){var n=-1,a=null==e?0:e.length;for(this.clear();++n<a;){var t=e[n];this.set(t[0],t[1])}}function Ja(e){var n=-1,a=null==e?0:e.length;for(this.clear();++n<a;){var t=e[n];this.set(t[0],t[1])}}function Ya(e){var n=-1,a=null==e?0:e.length;for(this.__data__=new Ja;++n<a;)this.add(e[n])}function Za(e){var n=this.__data__=new Ka(e);this.size=n.size}function Xa(e,n){var a=Vr(e),t=!a&&Gr(e),i=!a&&!t&&Zr(e),o=!a&&!t&&!i&&ds(e),r=a||t||i||o,s=r?Yn(e.length,Ce):[],c=s.length;for(var p in e)!n&&!Le.call(e,p)||r&&("length"==p||i&&("offset"==p||"parent"==p)||o&&("buffer"==p||"byteLength"==p||"byteOffset"==p)||_o(p,c))||s.push(p);return s}function Qa(e){var n=e.length;return n?e[Yt(0,n-1)]:i}function et(e,n){return Uo(Ai(e),pt(n,0,e.length))}function nt(e){return Uo(Ai(e))}function at(e,n,a){(a!==i&&!Hr(e[n],a)||a===i&&!(n in e))&&st(e,n,a)}function tt(e,n,a){var t=e[n];Le.call(e,n)&&Hr(t,a)&&(a!==i||n in e)||st(e,n,a)}function it(e,n){for(var a=e.length;a--;)if(Hr(e[a][0],n))return a;return-1}function ot(e,n,a,t){return ft(e,(function(e,i,o){n(t,e,a(e),o)})),t}function rt(e,n){return e&&Ti(n,qs(n),e)}function st(e,n,a){"__proto__"==n&&pn?pn(e,n,{configurable:!0,enumerable:!0,value:a,writable:!0}):e[n]=a}function ct(e,n){for(var a=-1,o=n.length,r=t(o),s=null==e;++a<o;)r[a]=s?i:Cs(e,n[a]);return r}function pt(e,n,a){return e==e&&(a!==i&&(e=e<=a?e:a),n!==i&&(e=e>=n?e:n)),e}function ut(e,n,a,t,o,r){var s,c=1&n,p=2&n,u=4&n;if(a&&(s=o?a(e,t,o,r):a(e)),s!==i)return s;if(!ts(e))return e;var l=Vr(e);if(l){if(s=function(e){var n=e.length,a=new e.constructor(n);n&&"string"==typeof e[0]&&Le.call(e,"index")&&(a.index=e.index,a.input=e.input);return a}(e),!c)return Ai(e,s)}else{var d=ho(e),m=d==j||d==k;if(Zr(e))return Ei(e,c);if(d==P||d==b||m&&!o){if(s=p||m?{}:go(e),!c)return p?function(e,n){return Ti(e,xo(e),n)}(e,function(e,n){return e&&Ti(n,Ds(n),e)}(s,e)):function(e,n){return Ti(e,vo(e),n)}(e,rt(s,e))}else{if(!cn[d])return o?e:{};s=function(e,n,a){var t=e.constructor;switch(n){case q:return Oi(e);case y:case _:return new t(+e);case D:return function(e,n){var a=n?Oi(e.buffer):e.buffer;return new e.constructor(a,e.byteOffset,e.byteLength)}(e,a);case L:case B:case U:case F:case I:case M:case N:case H:case W:return Pi(e,a);case E:return new t;case O:case A:return new t(e);case C:return function(e){var n=new e.constructor(e.source,ve.exec(e));return n.lastIndex=e.lastIndex,n}(e);case S:return new t;case T:return i=e,Ia?Pe(Ia.call(i)):{}}var i}(e,d,c)}}r||(r=new Za);var f=r.get(e);if(f)return f;r.set(e,s),ps(e)?e.forEach((function(t){s.add(ut(t,n,a,t,e,r))})):os(e)&&e.forEach((function(t,i){s.set(i,ut(t,n,a,i,e,r))}));var v=l?i:(u?p?ro:oo:p?Ds:qs)(e);return Rn(v||e,(function(t,i){v&&(t=e[i=t]),tt(s,i,ut(t,n,a,i,e,r))})),s}function lt(e,n,a){var t=a.length;if(null==e)return!t;for(e=Pe(e);t--;){var o=a[t],r=n[o],s=e[o];if(s===i&&!(o in e)||!r(s))return!1}return!0}function dt(e,n,a){if("function"!=typeof e)throw new Se(o);return qo((function(){e.apply(i,a)}),n)}function mt(e,n,a,t){var i=-1,o=Tn,r=!0,s=e.length,c=[],p=n.length;if(!s)return c;a&&(n=qn(n,Xn(a))),t?(o=zn,r=!1):n.length>=200&&(o=ea,r=!1,n=new Ya(n));e:for(;++i<s;){var u=e[i],l=null==a?u:a(u);if(u=t||0!==u?u:0,r&&l==l){for(var d=p;d--;)if(n[d]===l)continue e;c.push(u)}else o(n,l,t)||c.push(u)}return c}Na.templateSettings={escape:X,evaluate:Q,interpolate:ee,variable:"",imports:{_:Na}},Na.prototype=Wa.prototype,Na.prototype.constructor=Na,$a.prototype=Ha(Wa.prototype),$a.prototype.constructor=$a,Ga.prototype=Ha(Wa.prototype),Ga.prototype.constructor=Ga,Va.prototype.clear=function(){this.__data__=Aa?Aa(null):{},this.size=0},Va.prototype.delete=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n},Va.prototype.get=function(e){var n=this.__data__;if(Aa){var a=n[e];return a===r?i:a}return Le.call(n,e)?n[e]:i},Va.prototype.has=function(e){var n=this.__data__;return Aa?n[e]!==i:Le.call(n,e)},Va.prototype.set=function(e,n){var a=this.__data__;return this.size+=this.has(e)?0:1,a[e]=Aa&&n===i?r:n,this},Ka.prototype.clear=function(){this.__data__=[],this.size=0},Ka.prototype.delete=function(e){var n=this.__data__,a=it(n,e);return!(a<0)&&(a==n.length-1?n.pop():Ye.call(n,a,1),--this.size,!0)},Ka.prototype.get=function(e){var n=this.__data__,a=it(n,e);return a<0?i:n[a][1]},Ka.prototype.has=function(e){return it(this.__data__,e)>-1},Ka.prototype.set=function(e,n){var a=this.__data__,t=it(a,e);return t<0?(++this.size,a.push([e,n])):a[t][1]=n,this},Ja.prototype.clear=function(){this.size=0,this.__data__={hash:new Va,map:new(Pa||Ka),string:new Va}},Ja.prototype.delete=function(e){var n=lo(this,e).delete(e);return this.size-=n?1:0,n},Ja.prototype.get=function(e){return lo(this,e).get(e)},Ja.prototype.has=function(e){return lo(this,e).has(e)},Ja.prototype.set=function(e,n){var a=lo(this,e),t=a.size;return a.set(e,n),this.size+=a.size==t?0:1,this},Ya.prototype.add=Ya.prototype.push=function(e){return this.__data__.set(e,r),this},Ya.prototype.has=function(e){return this.__data__.has(e)},Za.prototype.clear=function(){this.__data__=new Ka,this.size=0},Za.prototype.delete=function(e){var n=this.__data__,a=n.delete(e);return this.size=n.size,a},Za.prototype.get=function(e){return this.__data__.get(e)},Za.prototype.has=function(e){return this.__data__.has(e)},Za.prototype.set=function(e,n){var a=this.__data__;if(a instanceof Ka){var t=a.__data__;if(!Pa||t.length<199)return t.push([e,n]),this.size=++a.size,this;a=this.__data__=new Ja(t)}return a.set(e,n),this.size=a.size,this};var ft=Di(wt),vt=Di(jt,!0);function xt(e,n){var a=!0;return ft(e,(function(e,t,i){return a=!!n(e,t,i)})),a}function ht(e,n,a){for(var t=-1,o=e.length;++t<o;){var r=e[t],s=n(r);if(null!=s&&(c===i?s==s&&!ls(s):a(s,c)))var c=s,p=r}return p}function bt(e,n){var a=[];return ft(e,(function(e,t,i){n(e,t,i)&&a.push(e)})),a}function gt(e,n,a,t,i){var o=-1,r=e.length;for(a||(a=yo),i||(i=[]);++o<r;){var s=e[o];n>0&&a(s)?n>1?gt(s,n-1,a,t,i):Dn(i,s):t||(i[i.length]=s)}return i}var yt=Li(),_t=Li(!0);function wt(e,n){return e&&yt(e,n,qs)}function jt(e,n){return e&&_t(e,n,qs)}function kt(e,n){return An(n,(function(n){return es(e[n])}))}function Et(e,n){for(var a=0,t=(n=_i(n,e)).length;null!=e&&a<t;)e=e[Io(n[a++])];return a&&a==t?e:i}function Ot(e,n,a){var t=n(e);return Vr(e)?t:Dn(t,a(e))}function Pt(e){return null==e?e===i?"[object Undefined]":"[object Null]":an&&an in Pe(e)?function(e){var n=Le.call(e,an),a=e[an];try{e[an]=i;var t=!0}catch(e){}var o=Fe.call(e);t&&(n?e[an]=a:delete e[an]);return o}(e):function(e){return Fe.call(e)}(e)}function Rt(e,n){return e>n}function Ct(e,n){return null!=e&&Le.call(e,n)}function St(e,n){return null!=e&&n in Pe(e)}function At(e,n,a){for(var o=a?zn:Tn,r=e[0].length,s=e.length,c=s,p=t(s),u=1/0,l=[];c--;){var d=e[c];c&&n&&(d=qn(d,Xn(n))),u=_a(d.length,u),p[c]=!a&&(n||r>=120&&d.length>=120)?new Ya(c&&d):i}d=e[0];var m=-1,f=p[0];e:for(;++m<r&&l.length<u;){var v=d[m],x=n?n(v):v;if(v=a||0!==v?v:0,!(f?ea(f,x):o(l,x,a))){for(c=s;--c;){var h=p[c];if(!(h?ea(h,x):o(e[c],x,a)))continue e}f&&f.push(x),l.push(v)}}return l}function Tt(e,n,a){var t=null==(e=So(e,n=_i(n,e)))?e:e[Io(Qo(n))];return null==t?i:On(t,e,a)}function zt(e){return is(e)&&Pt(e)==b}function qt(e,n,a,t,o){return e===n||(null==e||null==n||!is(e)&&!is(n)?e!=e&&n!=n:function(e,n,a,t,o,r){var s=Vr(e),c=Vr(n),p=s?g:ho(e),u=c?g:ho(n),l=(p=p==b?P:p)==P,d=(u=u==b?P:u)==P,m=p==u;if(m&&Zr(e)){if(!Zr(n))return!1;s=!0,l=!1}if(m&&!l)return r||(r=new Za),s||ds(e)?to(e,n,a,t,o,r):function(e,n,a,t,i,o,r){switch(a){case D:if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case q:return!(e.byteLength!=n.byteLength||!o(new $e(e),new $e(n)));case y:case _:case O:return Hr(+e,+n);case w:return e.name==n.name&&e.message==n.message;case C:case A:return e==n+"";case E:var s=ca;case S:var c=1&t;if(s||(s=la),e.size!=n.size&&!c)return!1;var p=r.get(e);if(p)return p==n;t|=2,r.set(e,n);var u=to(s(e),s(n),t,i,o,r);return r.delete(e),u;case T:if(Ia)return Ia.call(e)==Ia.call(n)}return!1}(e,n,p,a,t,o,r);if(!(1&a)){var f=l&&Le.call(e,"__wrapped__"),v=d&&Le.call(n,"__wrapped__");if(f||v){var x=f?e.value():e,h=v?n.value():n;return r||(r=new Za),o(x,h,a,t,r)}}if(!m)return!1;return r||(r=new Za),function(e,n,a,t,o,r){var s=1&a,c=oo(e),p=c.length,u=oo(n).length;if(p!=u&&!s)return!1;var l=p;for(;l--;){var d=c[l];if(!(s?d in n:Le.call(n,d)))return!1}var m=r.get(e),f=r.get(n);if(m&&f)return m==n&&f==e;var v=!0;r.set(e,n),r.set(n,e);var x=s;for(;++l<p;){var h=e[d=c[l]],b=n[d];if(t)var g=s?t(b,h,d,n,e,r):t(h,b,d,e,n,r);if(!(g===i?h===b||o(h,b,a,t,r):g)){v=!1;break}x||(x="constructor"==d)}if(v&&!x){var y=e.constructor,_=n.constructor;y==_||!("constructor"in e)||!("constructor"in n)||"function"==typeof y&&y instanceof y&&"function"==typeof _&&_ instanceof _||(v=!1)}return r.delete(e),r.delete(n),v}(e,n,a,t,o,r)}(e,n,a,t,qt,o))}function Dt(e,n,a,t){var o=a.length,r=o,s=!t;if(null==e)return!r;for(e=Pe(e);o--;){var c=a[o];if(s&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++o<r;){var p=(c=a[o])[0],u=e[p],l=c[1];if(s&&c[2]){if(u===i&&!(p in e))return!1}else{var d=new Za;if(t)var m=t(u,l,p,e,n,d);if(!(m===i?qt(l,u,3,t,d):m))return!1}}return!0}function Lt(e){return!(!ts(e)||(n=e,Ue&&Ue in n))&&(es(e)?Ne:be).test(Mo(e));var n}function Bt(e){return"function"==typeof e?e:null==e?rc:"object"==typeof e?Vr(e)?Ht(e[0],e[1]):Nt(e):vc(e)}function Ut(e){if(!Oo(e))return ga(e);var n=[];for(var a in Pe(e))Le.call(e,a)&&"constructor"!=a&&n.push(a);return n}function Ft(e){if(!ts(e))return function(e){var n=[];if(null!=e)for(var a in Pe(e))n.push(a);return n}(e);var n=Oo(e),a=[];for(var t in e)("constructor"!=t||!n&&Le.call(e,t))&&a.push(t);return a}function It(e,n){return e<n}function Mt(e,n){var a=-1,i=Jr(e)?t(e.length):[];return ft(e,(function(e,t,o){i[++a]=n(e,t,o)})),i}function Nt(e){var n=mo(e);return 1==n.length&&n[0][2]?Ro(n[0][0],n[0][1]):function(a){return a===e||Dt(a,e,n)}}function Ht(e,n){return jo(e)&&Po(n)?Ro(Io(e),n):function(a){var t=Cs(a,e);return t===i&&t===n?Ss(a,e):qt(n,t,3)}}function Wt(e,n,a,t,o){e!==n&&yt(n,(function(r,s){if(o||(o=new Za),ts(r))!function(e,n,a,t,o,r,s){var c=To(e,a),p=To(n,a),u=s.get(p);if(u)return void at(e,a,u);var l=r?r(c,p,a+"",e,n,s):i,d=l===i;if(d){var m=Vr(p),f=!m&&Zr(p),v=!m&&!f&&ds(p);l=p,m||f||v?Vr(c)?l=c:Yr(c)?l=Ai(c):f?(d=!1,l=Ei(p,!0)):v?(d=!1,l=Pi(p,!0)):l=[]:ss(p)||Gr(p)?(l=c,Gr(c)?l=ys(c):ts(c)&&!es(c)||(l=go(p))):d=!1}d&&(s.set(p,l),o(l,p,t,r,s),s.delete(p));at(e,a,l)}(e,n,s,a,Wt,t,o);else{var c=t?t(To(e,s),r,s+"",e,n,o):i;c===i&&(c=r),at(e,s,c)}}),Ds)}function $t(e,n){var a=e.length;if(a)return _o(n+=n<0?a:0,a)?e[n]:i}function Gt(e,n,a){n=n.length?qn(n,(function(e){return Vr(e)?function(n){return Et(n,1===e.length?e[0]:e)}:e})):[rc];var t=-1;n=qn(n,Xn(uo()));var i=Mt(e,(function(e,a,i){var o=qn(n,(function(n){return n(e)}));return{criteria:o,index:++t,value:e}}));return function(e,n){var a=e.length;for(e.sort(n);a--;)e[a]=e[a].value;return e}(i,(function(e,n){return function(e,n,a){var t=-1,i=e.criteria,o=n.criteria,r=i.length,s=a.length;for(;++t<r;){var c=Ri(i[t],o[t]);if(c)return t>=s?c:c*("desc"==a[t]?-1:1)}return e.index-n.index}(e,n,a)}))}function Vt(e,n,a){for(var t=-1,i=n.length,o={};++t<i;){var r=n[t],s=Et(e,r);a(s,r)&&ni(o,_i(r,e),s)}return o}function Kt(e,n,a,t){var i=t?Hn:Nn,o=-1,r=n.length,s=e;for(e===n&&(n=Ai(n)),a&&(s=qn(e,Xn(a)));++o<r;)for(var c=0,p=n[o],u=a?a(p):p;(c=i(s,u,c,t))>-1;)s!==e&&Ye.call(s,c,1),Ye.call(e,c,1);return e}function Jt(e,n){for(var a=e?n.length:0,t=a-1;a--;){var i=n[a];if(a==t||i!==o){var o=i;_o(i)?Ye.call(e,i,1):mi(e,i)}}return e}function Yt(e,n){return e+bn(ka()*(n-e+1))}function Zt(e,n){var a="";if(!e||n<1||n>f)return a;do{n%2&&(a+=e),(n=bn(n/2))&&(e+=e)}while(n);return a}function Xt(e,n){return Do(Co(e,n,rc),e+"")}function Qt(e){return Qa(Hs(e))}function ei(e,n){var a=Hs(e);return Uo(a,pt(n,0,a.length))}function ni(e,n,a,t){if(!ts(e))return e;for(var o=-1,r=(n=_i(n,e)).length,s=r-1,c=e;null!=c&&++o<r;){var p=Io(n[o]),u=a;if("__proto__"===p||"constructor"===p||"prototype"===p)return e;if(o!=s){var l=c[p];(u=t?t(l,p,c):i)===i&&(u=ts(l)?l:_o(n[o+1])?[]:{})}tt(c,p,u),c=c[p]}return e}var ai=Ta?function(e,n){return Ta.set(e,n),e}:rc,ti=pn?function(e,n){return pn(e,"toString",{configurable:!0,enumerable:!1,value:tc(n),writable:!0})}:rc;function ii(e){return Uo(Hs(e))}function oi(e,n,a){var i=-1,o=e.length;n<0&&(n=-n>o?0:o+n),(a=a>o?o:a)<0&&(a+=o),o=n>a?0:a-n>>>0,n>>>=0;for(var r=t(o);++i<o;)r[i]=e[i+n];return r}function ri(e,n){var a;return ft(e,(function(e,t,i){return!(a=n(e,t,i))})),!!a}function si(e,n,a){var t=0,i=null==e?t:e.length;if("number"==typeof n&&n==n&&i<=2147483647){for(;t<i;){var o=t+i>>>1,r=e[o];null!==r&&!ls(r)&&(a?r<=n:r<n)?t=o+1:i=o}return i}return ci(e,n,rc,a)}function ci(e,n,a,t){var o=0,r=null==e?0:e.length;if(0===r)return 0;for(var s=(n=a(n))!=n,c=null===n,p=ls(n),u=n===i;o<r;){var l=bn((o+r)/2),d=a(e[l]),m=d!==i,f=null===d,v=d==d,x=ls(d);if(s)var h=t||v;else h=u?v&&(t||m):c?v&&m&&(t||!f):p?v&&m&&!f&&(t||!x):!f&&!x&&(t?d<=n:d<n);h?o=l+1:r=l}return _a(r,4294967294)}function pi(e,n){for(var a=-1,t=e.length,i=0,o=[];++a<t;){var r=e[a],s=n?n(r):r;if(!a||!Hr(s,c)){var c=s;o[i++]=0===r?0:r}}return o}function ui(e){return"number"==typeof e?e:ls(e)?v:+e}function li(e){if("string"==typeof e)return e;if(Vr(e))return qn(e,li)+"";if(ls(e))return Ma?Ma.call(e):"";var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}function di(e,n,a){var t=-1,i=Tn,o=e.length,r=!0,s=[],c=s;if(a)r=!1,i=zn;else if(o>=200){var p=n?null:Zi(e);if(p)return la(p);r=!1,i=ea,c=new Ya}else c=n?[]:s;e:for(;++t<o;){var u=e[t],l=n?n(u):u;if(u=a||0!==u?u:0,r&&l==l){for(var d=c.length;d--;)if(c[d]===l)continue e;n&&c.push(l),s.push(u)}else i(c,l,a)||(c!==s&&c.push(l),s.push(u))}return s}function mi(e,n){return null==(e=So(e,n=_i(n,e)))||delete e[Io(Qo(n))]}function fi(e,n,a,t){return ni(e,n,a(Et(e,n)),t)}function vi(e,n,a,t){for(var i=e.length,o=t?i:-1;(t?o--:++o<i)&&n(e[o],o,e););return a?oi(e,t?0:o,t?o+1:i):oi(e,t?o+1:0,t?i:o)}function xi(e,n){var a=e;return a instanceof Ga&&(a=a.value()),Ln(n,(function(e,n){return n.func.apply(n.thisArg,Dn([e],n.args))}),a)}function hi(e,n,a){var i=e.length;if(i<2)return i?di(e[0]):[];for(var o=-1,r=t(i);++o<i;)for(var s=e[o],c=-1;++c<i;)c!=o&&(r[o]=mt(r[o]||s,e[c],n,a));return di(gt(r,1),n,a)}function bi(e,n,a){for(var t=-1,o=e.length,r=n.length,s={};++t<o;){var c=t<r?n[t]:i;a(s,e[t],c)}return s}function gi(e){return Yr(e)?e:[]}function yi(e){return"function"==typeof e?e:rc}function _i(e,n){return Vr(e)?e:jo(e,n)?[e]:Fo(_s(e))}var wi=Xt;function ji(e,n,a){var t=e.length;return a=a===i?t:a,!n&&a>=t?e:oi(e,n,a)}var ki=dn||function(e){return fn.clearTimeout(e)};function Ei(e,n){if(n)return e.slice();var a=e.length,t=Ge?Ge(a):new e.constructor(a);return e.copy(t),t}function Oi(e){var n=new e.constructor(e.byteLength);return new $e(n).set(new $e(e)),n}function Pi(e,n){var a=n?Oi(e.buffer):e.buffer;return new e.constructor(a,e.byteOffset,e.length)}function Ri(e,n){if(e!==n){var a=e!==i,t=null===e,o=e==e,r=ls(e),s=n!==i,c=null===n,p=n==n,u=ls(n);if(!c&&!u&&!r&&e>n||r&&s&&p&&!c&&!u||t&&s&&p||!a&&p||!o)return 1;if(!t&&!r&&!u&&e<n||u&&a&&o&&!t&&!r||c&&a&&o||!s&&o||!p)return-1}return 0}function Ci(e,n,a,i){for(var o=-1,r=e.length,s=a.length,c=-1,p=n.length,u=ya(r-s,0),l=t(p+u),d=!i;++c<p;)l[c]=n[c];for(;++o<s;)(d||o<r)&&(l[a[o]]=e[o]);for(;u--;)l[c++]=e[o++];return l}function Si(e,n,a,i){for(var o=-1,r=e.length,s=-1,c=a.length,p=-1,u=n.length,l=ya(r-c,0),d=t(l+u),m=!i;++o<l;)d[o]=e[o];for(var f=o;++p<u;)d[f+p]=n[p];for(;++s<c;)(m||o<r)&&(d[f+a[s]]=e[o++]);return d}function Ai(e,n){var a=-1,i=e.length;for(n||(n=t(i));++a<i;)n[a]=e[a];return n}function Ti(e,n,a,t){var o=!a;a||(a={});for(var r=-1,s=n.length;++r<s;){var c=n[r],p=t?t(a[c],e[c],c,a,e):i;p===i&&(p=e[c]),o?st(a,c,p):tt(a,c,p)}return a}function zi(e,n){return function(a,t){var i=Vr(a)?Pn:ot,o=n?n():{};return i(a,e,uo(t,2),o)}}function qi(e){return Xt((function(n,a){var t=-1,o=a.length,r=o>1?a[o-1]:i,s=o>2?a[2]:i;for(r=e.length>3&&"function"==typeof r?(o--,r):i,s&&wo(a[0],a[1],s)&&(r=o<3?i:r,o=1),n=Pe(n);++t<o;){var c=a[t];c&&e(n,c,t,r)}return n}))}function Di(e,n){return function(a,t){if(null==a)return a;if(!Jr(a))return e(a,t);for(var i=a.length,o=n?i:-1,r=Pe(a);(n?o--:++o<i)&&!1!==t(r[o],o,r););return a}}function Li(e){return function(n,a,t){for(var i=-1,o=Pe(n),r=t(n),s=r.length;s--;){var c=r[e?s:++i];if(!1===a(o[c],c,o))break}return n}}function Bi(e){return function(n){var a=sa(n=_s(n))?fa(n):i,t=a?a[0]:n.charAt(0),o=a?ji(a,1).join(""):n.slice(1);return t[e]()+o}}function Ui(e){return function(n){return Ln(ec(Gs(n).replace(Xe,"")),e,"")}}function Fi(e){return function(){var n=arguments;switch(n.length){case 0:return new e;case 1:return new e(n[0]);case 2:return new e(n[0],n[1]);case 3:return new e(n[0],n[1],n[2]);case 4:return new e(n[0],n[1],n[2],n[3]);case 5:return new e(n[0],n[1],n[2],n[3],n[4]);case 6:return new e(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new e(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var a=Ha(e.prototype),t=e.apply(a,n);return ts(t)?t:a}}function Ii(e){return function(n,a,t){var o=Pe(n);if(!Jr(n)){var r=uo(a,3);n=qs(n),a=function(e){return r(o[e],e,o)}}var s=e(n,a,t);return s>-1?o[r?n[s]:s]:i}}function Mi(e){return io((function(n){var a=n.length,t=a,r=$a.prototype.thru;for(e&&n.reverse();t--;){var s=n[t];if("function"!=typeof s)throw new Se(o);if(r&&!c&&"wrapper"==co(s))var c=new $a([],!0)}for(t=c?t:a;++t<a;){var p=co(s=n[t]),u="wrapper"==p?so(s):i;c=u&&ko(u[0])&&424==u[1]&&!u[4].length&&1==u[9]?c[co(u[0])].apply(c,u[3]):1==s.length&&ko(s)?c[p]():c.thru(s)}return function(){var e=arguments,t=e[0];if(c&&1==e.length&&Vr(t))return c.plant(t).value();for(var i=0,o=a?n[i].apply(this,e):t;++i<a;)o=n[i].call(this,o);return o}}))}function Ni(e,n,a,o,r,s,c,p,u,d){var m=n&l,f=1&n,v=2&n,x=24&n,h=512&n,b=v?i:Fi(e);return function i(){for(var l=arguments.length,g=t(l),y=l;y--;)g[y]=arguments[y];if(x)var _=po(i),w=ta(g,_);if(o&&(g=Ci(g,o,r,x)),s&&(g=Si(g,s,c,x)),l-=w,x&&l<d){var j=ua(g,_);return Ji(e,n,Ni,i.placeholder,a,g,j,p,u,d-l)}var k=f?a:this,E=v?k[e]:e;return l=g.length,p?g=Ao(g,p):h&&l>1&&g.reverse(),m&&u<l&&(g.length=u),this&&this!==fn&&this instanceof i&&(E=b||Fi(E)),E.apply(k,g)}}function Hi(e,n){return function(a,t){return function(e,n,a,t){return wt(e,(function(e,i,o){n(t,a(e),i,o)})),t}(a,e,n(t),{})}}function Wi(e,n){return function(a,t){var o;if(a===i&&t===i)return n;if(a!==i&&(o=a),t!==i){if(o===i)return t;"string"==typeof a||"string"==typeof t?(a=li(a),t=li(t)):(a=ui(a),t=ui(t)),o=e(a,t)}return o}}function $i(e){return io((function(n){return n=qn(n,Xn(uo())),Xt((function(a){var t=this;return e(n,(function(e){return On(e,t,a)}))}))}))}function Gi(e,n){var a=(n=n===i?" ":li(n)).length;if(a<2)return a?Zt(n,e):n;var t=Zt(n,xn(e/ma(n)));return sa(n)?ji(fa(t),0,e).join(""):t.slice(0,e)}function Vi(e){return function(n,a,o){return o&&"number"!=typeof o&&wo(n,a,o)&&(a=o=i),n=xs(n),a===i?(a=n,n=0):a=xs(a),function(e,n,a,i){for(var o=-1,r=ya(xn((n-e)/(a||1)),0),s=t(r);r--;)s[i?r:++o]=e,e+=a;return s}(n,a,o=o===i?n<a?1:-1:xs(o),e)}}function Ki(e){return function(n,a){return"string"==typeof n&&"string"==typeof a||(n=gs(n),a=gs(a)),e(n,a)}}function Ji(e,n,a,t,o,r,s,c,l,d){var m=8&n;n|=m?p:u,4&(n&=~(m?u:p))||(n&=-4);var f=[e,n,o,m?r:i,m?s:i,m?i:r,m?i:s,c,l,d],v=a.apply(i,f);return ko(e)&&zo(v,f),v.placeholder=t,Lo(v,e,n)}function Yi(e){var n=Oe[e];return function(e,a){if(e=gs(e),(a=null==a?0:_a(hs(a),292))&&Vn(e)){var t=(_s(e)+"e").split("e");return+((t=(_s(n(t[0]+"e"+(+t[1]+a)))+"e").split("e"))[0]+"e"+(+t[1]-a))}return n(e)}}var Zi=Ca&&1/la(new Ca([,-0]))[1]==m?function(e){return new Ca(e)}:lc;function Xi(e){return function(n){var a=ho(n);return a==E?ca(n):a==S?da(n):function(e,n){return qn(n,(function(n){return[n,e[n]]}))}(n,e(n))}}function Qi(e,n,a,r,m,f,v,x){var h=2&n;if(!h&&"function"!=typeof e)throw new Se(o);var b=r?r.length:0;if(b||(n&=-97,r=m=i),v=v===i?v:ya(hs(v),0),x=x===i?x:hs(x),b-=m?m.length:0,n&u){var g=r,y=m;r=m=i}var _=h?i:so(e),w=[e,n,a,r,m,g,y,f,v,x];if(_&&function(e,n){var a=e[1],t=n[1],i=a|t,o=i<131,r=t==l&&8==a||t==l&&a==d&&e[7].length<=n[8]||384==t&&n[7].length<=n[8]&&8==a;if(!o&&!r)return e;1&t&&(e[2]=n[2],i|=1&a?0:4);var c=n[3];if(c){var p=e[3];e[3]=p?Ci(p,c,n[4]):c,e[4]=p?ua(e[3],s):n[4]}(c=n[5])&&(p=e[5],e[5]=p?Si(p,c,n[6]):c,e[6]=p?ua(e[5],s):n[6]);(c=n[7])&&(e[7]=c);t&l&&(e[8]=null==e[8]?n[8]:_a(e[8],n[8]));null==e[9]&&(e[9]=n[9]);e[0]=n[0],e[1]=i}(w,_),e=w[0],n=w[1],a=w[2],r=w[3],m=w[4],!(x=w[9]=w[9]===i?h?0:e.length:ya(w[9]-b,0))&&24&n&&(n&=-25),n&&1!=n)j=8==n||n==c?function(e,n,a){var o=Fi(e);return function r(){for(var s=arguments.length,c=t(s),p=s,u=po(r);p--;)c[p]=arguments[p];var l=s<3&&c[0]!==u&&c[s-1]!==u?[]:ua(c,u);return(s-=l.length)<a?Ji(e,n,Ni,r.placeholder,i,c,l,i,i,a-s):On(this&&this!==fn&&this instanceof r?o:e,this,c)}}(e,n,x):n!=p&&33!=n||m.length?Ni.apply(i,w):function(e,n,a,i){var o=1&n,r=Fi(e);return function n(){for(var s=-1,c=arguments.length,p=-1,u=i.length,l=t(u+c),d=this&&this!==fn&&this instanceof n?r:e;++p<u;)l[p]=i[p];for(;c--;)l[p++]=arguments[++s];return On(d,o?a:this,l)}}(e,n,a,r);else var j=function(e,n,a){var t=1&n,i=Fi(e);return function n(){return(this&&this!==fn&&this instanceof n?i:e).apply(t?a:this,arguments)}}(e,n,a);return Lo((_?ai:zo)(j,w),e,n)}function eo(e,n,a,t){return e===i||Hr(e,ze[a])&&!Le.call(t,a)?n:e}function no(e,n,a,t,o,r){return ts(e)&&ts(n)&&(r.set(n,e),Wt(e,n,i,no,r),r.delete(n)),e}function ao(e){return ss(e)?i:e}function to(e,n,a,t,o,r){var s=1&a,c=e.length,p=n.length;if(c!=p&&!(s&&p>c))return!1;var u=r.get(e),l=r.get(n);if(u&&l)return u==n&&l==e;var d=-1,m=!0,f=2&a?new Ya:i;for(r.set(e,n),r.set(n,e);++d<c;){var v=e[d],x=n[d];if(t)var h=s?t(x,v,d,n,e,r):t(v,x,d,e,n,r);if(h!==i){if(h)continue;m=!1;break}if(f){if(!Un(n,(function(e,n){if(!ea(f,n)&&(v===e||o(v,e,a,t,r)))return f.push(n)}))){m=!1;break}}else if(v!==x&&!o(v,x,a,t,r)){m=!1;break}}return r.delete(e),r.delete(n),m}function io(e){return Do(Co(e,i,Ko),e+"")}function oo(e){return Ot(e,qs,vo)}function ro(e){return Ot(e,Ds,xo)}var so=Ta?function(e){return Ta.get(e)}:lc;function co(e){for(var n=e.name+"",a=za[n],t=Le.call(za,n)?a.length:0;t--;){var i=a[t],o=i.func;if(null==o||o==e)return i.name}return n}function po(e){return(Le.call(Na,"placeholder")?Na:e).placeholder}function uo(){var e=Na.iteratee||sc;return e=e===sc?Bt:e,arguments.length?e(arguments[0],arguments[1]):e}function lo(e,n){var a,t,i=e.__data__;return("string"==(t=typeof(a=n))||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==a:null===a)?i["string"==typeof n?"string":"hash"]:i.map}function mo(e){for(var n=qs(e),a=n.length;a--;){var t=n[a],i=e[t];n[a]=[t,i,Po(i)]}return n}function fo(e,n){var a=function(e,n){return null==e?i:e[n]}(e,n);return Lt(a)?a:i}var vo=gn?function(e){return null==e?[]:(e=Pe(e),An(gn(e),(function(n){return Je.call(e,n)})))}:bc,xo=gn?function(e){for(var n=[];e;)Dn(n,vo(e)),e=Ve(e);return n}:bc,ho=Pt;function bo(e,n,a){for(var t=-1,i=(n=_i(n,e)).length,o=!1;++t<i;){var r=Io(n[t]);if(!(o=null!=e&&a(e,r)))break;e=e[r]}return o||++t!=i?o:!!(i=null==e?0:e.length)&&as(i)&&_o(r,i)&&(Vr(e)||Gr(e))}function go(e){return"function"!=typeof e.constructor||Oo(e)?{}:Ha(Ve(e))}function yo(e){return Vr(e)||Gr(e)||!!(Ze&&e&&e[Ze])}function _o(e,n){var a=typeof e;return!!(n=null==n?f:n)&&("number"==a||"symbol"!=a&&ye.test(e))&&e>-1&&e%1==0&&e<n}function wo(e,n,a){if(!ts(a))return!1;var t=typeof n;return!!("number"==t?Jr(a)&&_o(n,a.length):"string"==t&&n in a)&&Hr(a[n],e)}function jo(e,n){if(Vr(e))return!1;var a=typeof e;return!("number"!=a&&"symbol"!=a&&"boolean"!=a&&null!=e&&!ls(e))||(ae.test(e)||!ne.test(e)||null!=n&&e in Pe(n))}function ko(e){var n=co(e),a=Na[n];if("function"!=typeof a||!(n in Ga.prototype))return!1;if(e===a)return!0;var t=so(a);return!!t&&e===t[0]}(Oa&&ho(new Oa(new ArrayBuffer(1)))!=D||Pa&&ho(new Pa)!=E||Ra&&ho(Ra.resolve())!=R||Ca&&ho(new Ca)!=S||Sa&&ho(new Sa)!=z)&&(ho=function(e){var n=Pt(e),a=n==P?e.constructor:i,t=a?Mo(a):"";if(t)switch(t){case qa:return D;case Da:return E;case La:return R;case Ba:return S;case Ua:return z}return n});var Eo=qe?es:gc;function Oo(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||ze)}function Po(e){return e==e&&!ts(e)}function Ro(e,n){return function(a){return null!=a&&(a[e]===n&&(n!==i||e in Pe(a)))}}function Co(e,n,a){return n=ya(n===i?e.length-1:n,0),function(){for(var i=arguments,o=-1,r=ya(i.length-n,0),s=t(r);++o<r;)s[o]=i[n+o];o=-1;for(var c=t(n+1);++o<n;)c[o]=i[o];return c[n]=a(s),On(e,this,c)}}function So(e,n){return n.length<2?e:Et(e,oi(n,0,-1))}function Ao(e,n){for(var a=e.length,t=_a(n.length,a),o=Ai(e);t--;){var r=n[t];e[t]=_o(r,a)?o[r]:i}return e}function To(e,n){if(("constructor"!==n||"function"!=typeof e[n])&&"__proto__"!=n)return e[n]}var zo=Bo(ai),qo=vn||function(e,n){return fn.setTimeout(e,n)},Do=Bo(ti);function Lo(e,n,a){var t=n+"";return Do(e,function(e,n){var a=n.length;if(!a)return e;var t=a-1;return n[t]=(a>1?"& ":"")+n[t],n=n.join(a>2?", ":" "),e.replace(ce,"{\n/* [wrapped with "+n+"] */\n")}(t,function(e,n){return Rn(h,(function(a){var t="_."+a[0];n&a[1]&&!Tn(e,t)&&e.push(t)})),e.sort()}(function(e){var n=e.match(pe);return n?n[1].split(ue):[]}(t),a)))}function Bo(e){var n=0,a=0;return function(){var t=wa(),o=16-(t-a);if(a=t,o>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(i,arguments)}}function Uo(e,n){var a=-1,t=e.length,o=t-1;for(n=n===i?t:n;++a<n;){var r=Yt(a,o),s=e[r];e[r]=e[a],e[a]=s}return e.length=n,e}var Fo=function(e){var n=Br(e,(function(e){return 500===a.size&&a.clear(),e})),a=n.cache;return n}((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(te,(function(e,a,t,i){n.push(t?i.replace(me,"$1"):a||e)})),n}));function Io(e){if("string"==typeof e||ls(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}function Mo(e){if(null!=e){try{return De.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function No(e){if(e instanceof Ga)return e.clone();var n=new $a(e.__wrapped__,e.__chain__);return n.__actions__=Ai(e.__actions__),n.__index__=e.__index__,n.__values__=e.__values__,n}var Ho=Xt((function(e,n){return Yr(e)?mt(e,gt(n,1,Yr,!0)):[]})),Wo=Xt((function(e,n){var a=Qo(n);return Yr(a)&&(a=i),Yr(e)?mt(e,gt(n,1,Yr,!0),uo(a,2)):[]})),$o=Xt((function(e,n){var a=Qo(n);return Yr(a)&&(a=i),Yr(e)?mt(e,gt(n,1,Yr,!0),i,a):[]}));function Go(e,n,a){var t=null==e?0:e.length;if(!t)return-1;var i=null==a?0:hs(a);return i<0&&(i=ya(t+i,0)),Mn(e,uo(n,3),i)}function Vo(e,n,a){var t=null==e?0:e.length;if(!t)return-1;var o=t-1;return a!==i&&(o=hs(a),o=a<0?ya(t+o,0):_a(o,t-1)),Mn(e,uo(n,3),o,!0)}function Ko(e){return(null==e?0:e.length)?gt(e,1):[]}function Jo(e){return e&&e.length?e[0]:i}var Yo=Xt((function(e){var n=qn(e,gi);return n.length&&n[0]===e[0]?At(n):[]})),Zo=Xt((function(e){var n=Qo(e),a=qn(e,gi);return n===Qo(a)?n=i:a.pop(),a.length&&a[0]===e[0]?At(a,uo(n,2)):[]})),Xo=Xt((function(e){var n=Qo(e),a=qn(e,gi);return(n="function"==typeof n?n:i)&&a.pop(),a.length&&a[0]===e[0]?At(a,i,n):[]}));function Qo(e){var n=null==e?0:e.length;return n?e[n-1]:i}var er=Xt(nr);function nr(e,n){return e&&e.length&&n&&n.length?Kt(e,n):e}var ar=io((function(e,n){var a=null==e?0:e.length,t=ct(e,n);return Jt(e,qn(n,(function(e){return _o(e,a)?+e:e})).sort(Ri)),t}));function tr(e){return null==e?e:Ea.call(e)}var ir=Xt((function(e){return di(gt(e,1,Yr,!0))})),or=Xt((function(e){var n=Qo(e);return Yr(n)&&(n=i),di(gt(e,1,Yr,!0),uo(n,2))})),rr=Xt((function(e){var n=Qo(e);return n="function"==typeof n?n:i,di(gt(e,1,Yr,!0),i,n)}));function sr(e){if(!e||!e.length)return[];var n=0;return e=An(e,(function(e){if(Yr(e))return n=ya(e.length,n),!0})),Yn(n,(function(n){return qn(e,Gn(n))}))}function cr(e,n){if(!e||!e.length)return[];var a=sr(e);return null==n?a:qn(a,(function(e){return On(n,i,e)}))}var pr=Xt((function(e,n){return Yr(e)?mt(e,n):[]})),ur=Xt((function(e){return hi(An(e,Yr))})),lr=Xt((function(e){var n=Qo(e);return Yr(n)&&(n=i),hi(An(e,Yr),uo(n,2))})),dr=Xt((function(e){var n=Qo(e);return n="function"==typeof n?n:i,hi(An(e,Yr),i,n)})),mr=Xt(sr);var fr=Xt((function(e){var n=e.length,a=n>1?e[n-1]:i;return a="function"==typeof a?(e.pop(),a):i,cr(e,a)}));function vr(e){var n=Na(e);return n.__chain__=!0,n}function xr(e,n){return n(e)}var hr=io((function(e){var n=e.length,a=n?e[0]:0,t=this.__wrapped__,o=function(n){return ct(n,e)};return!(n>1||this.__actions__.length)&&t instanceof Ga&&_o(a)?((t=t.slice(a,+a+(n?1:0))).__actions__.push({func:xr,args:[o],thisArg:i}),new $a(t,this.__chain__).thru((function(e){return n&&!e.length&&e.push(i),e}))):this.thru(o)}));var br=zi((function(e,n,a){Le.call(e,a)?++e[a]:st(e,a,1)}));var gr=Ii(Go),yr=Ii(Vo);function _r(e,n){return(Vr(e)?Rn:ft)(e,uo(n,3))}function wr(e,n){return(Vr(e)?Cn:vt)(e,uo(n,3))}var jr=zi((function(e,n,a){Le.call(e,a)?e[a].push(n):st(e,a,[n])}));var kr=Xt((function(e,n,a){var i=-1,o="function"==typeof n,r=Jr(e)?t(e.length):[];return ft(e,(function(e){r[++i]=o?On(n,e,a):Tt(e,n,a)})),r})),Er=zi((function(e,n,a){st(e,a,n)}));function Or(e,n){return(Vr(e)?qn:Mt)(e,uo(n,3))}var Pr=zi((function(e,n,a){e[a?0:1].push(n)}),(function(){return[[],[]]}));var Rr=Xt((function(e,n){if(null==e)return[];var a=n.length;return a>1&&wo(e,n[0],n[1])?n=[]:a>2&&wo(n[0],n[1],n[2])&&(n=[n[0]]),Gt(e,gt(n,1),[])})),Cr=mn||function(){return fn.Date.now()};function Sr(e,n,a){return n=a?i:n,n=e&&null==n?e.length:n,Qi(e,l,i,i,i,i,n)}function Ar(e,n){var a;if("function"!=typeof n)throw new Se(o);return e=hs(e),function(){return--e>0&&(a=n.apply(this,arguments)),e<=1&&(n=i),a}}var Tr=Xt((function(e,n,a){var t=1;if(a.length){var i=ua(a,po(Tr));t|=p}return Qi(e,t,n,a,i)})),zr=Xt((function(e,n,a){var t=3;if(a.length){var i=ua(a,po(zr));t|=p}return Qi(n,t,e,a,i)}));function qr(e,n,a){var t,r,s,c,p,u,l=0,d=!1,m=!1,f=!0;if("function"!=typeof e)throw new Se(o);function v(n){var a=t,o=r;return t=r=i,l=n,c=e.apply(o,a)}function x(e){return l=e,p=qo(b,n),d?v(e):c}function h(e){var a=e-u;return u===i||a>=n||a<0||m&&e-l>=s}function b(){var e=Cr();if(h(e))return g(e);p=qo(b,function(e){var a=n-(e-u);return m?_a(a,s-(e-l)):a}(e))}function g(e){return p=i,f&&t?v(e):(t=r=i,c)}function y(){var e=Cr(),a=h(e);if(t=arguments,r=this,u=e,a){if(p===i)return x(u);if(m)return ki(p),p=qo(b,n),v(u)}return p===i&&(p=qo(b,n)),c}return n=gs(n)||0,ts(a)&&(d=!!a.leading,s=(m="maxWait"in a)?ya(gs(a.maxWait)||0,n):s,f="trailing"in a?!!a.trailing:f),y.cancel=function(){p!==i&&ki(p),l=0,t=u=r=p=i},y.flush=function(){return p===i?c:g(Cr())},y}var Dr=Xt((function(e,n){return dt(e,1,n)})),Lr=Xt((function(e,n,a){return dt(e,gs(n)||0,a)}));function Br(e,n){if("function"!=typeof e||null!=n&&"function"!=typeof n)throw new Se(o);var a=function(){var t=arguments,i=n?n.apply(this,t):t[0],o=a.cache;if(o.has(i))return o.get(i);var r=e.apply(this,t);return a.cache=o.set(i,r)||o,r};return a.cache=new(Br.Cache||Ja),a}function Ur(e){if("function"!=typeof e)throw new Se(o);return function(){var n=arguments;switch(n.length){case 0:return!e.call(this);case 1:return!e.call(this,n[0]);case 2:return!e.call(this,n[0],n[1]);case 3:return!e.call(this,n[0],n[1],n[2])}return!e.apply(this,n)}}Br.Cache=Ja;var Fr=wi((function(e,n){var a=(n=1==n.length&&Vr(n[0])?qn(n[0],Xn(uo())):qn(gt(n,1),Xn(uo()))).length;return Xt((function(t){for(var i=-1,o=_a(t.length,a);++i<o;)t[i]=n[i].call(this,t[i]);return On(e,this,t)}))})),Ir=Xt((function(e,n){var a=ua(n,po(Ir));return Qi(e,p,i,n,a)})),Mr=Xt((function(e,n){var a=ua(n,po(Mr));return Qi(e,u,i,n,a)})),Nr=io((function(e,n){return Qi(e,d,i,i,i,n)}));function Hr(e,n){return e===n||e!=e&&n!=n}var Wr=Ki(Rt),$r=Ki((function(e,n){return e>=n})),Gr=zt(function(){return arguments}())?zt:function(e){return is(e)&&Le.call(e,"callee")&&!Je.call(e,"callee")},Vr=t.isArray,Kr=yn?Xn(yn):function(e){return is(e)&&Pt(e)==q};function Jr(e){return null!=e&&as(e.length)&&!es(e)}function Yr(e){return is(e)&&Jr(e)}var Zr=Fn||gc,Xr=_n?Xn(_n):function(e){return is(e)&&Pt(e)==_};function Qr(e){if(!is(e))return!1;var n=Pt(e);return n==w||"[object DOMException]"==n||"string"==typeof e.message&&"string"==typeof e.name&&!ss(e)}function es(e){if(!ts(e))return!1;var n=Pt(e);return n==j||n==k||"[object AsyncFunction]"==n||"[object Proxy]"==n}function ns(e){return"number"==typeof e&&e==hs(e)}function as(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=f}function ts(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}function is(e){return null!=e&&"object"==typeof e}var os=wn?Xn(wn):function(e){return is(e)&&ho(e)==E};function rs(e){return"number"==typeof e||is(e)&&Pt(e)==O}function ss(e){if(!is(e)||Pt(e)!=P)return!1;var n=Ve(e);if(null===n)return!0;var a=Le.call(n,"constructor")&&n.constructor;return"function"==typeof a&&a instanceof a&&De.call(a)==Ie}var cs=jn?Xn(jn):function(e){return is(e)&&Pt(e)==C};var ps=kn?Xn(kn):function(e){return is(e)&&ho(e)==S};function us(e){return"string"==typeof e||!Vr(e)&&is(e)&&Pt(e)==A}function ls(e){return"symbol"==typeof e||is(e)&&Pt(e)==T}var ds=En?Xn(En):function(e){return is(e)&&as(e.length)&&!!sn[Pt(e)]};var ms=Ki(It),fs=Ki((function(e,n){return e<=n}));function vs(e){if(!e)return[];if(Jr(e))return us(e)?fa(e):Ai(e);if(en&&e[en])return function(e){for(var n,a=[];!(n=e.next()).done;)a.push(n.value);return a}(e[en]());var n=ho(e);return(n==E?ca:n==S?la:Hs)(e)}function xs(e){return e?(e=gs(e))===m||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function hs(e){var n=xs(e),a=n%1;return n==n?a?n-a:n:0}function bs(e){return e?pt(hs(e),0,x):0}function gs(e){if("number"==typeof e)return e;if(ls(e))return v;if(ts(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=ts(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=Zn(e);var a=he.test(e);return a||ge.test(e)?ln(e.slice(2),a?2:8):xe.test(e)?v:+e}function ys(e){return Ti(e,Ds(e))}function _s(e){return null==e?"":li(e)}var ws=qi((function(e,n){if(Oo(n)||Jr(n))Ti(n,qs(n),e);else for(var a in n)Le.call(n,a)&&tt(e,a,n[a])})),js=qi((function(e,n){Ti(n,Ds(n),e)})),ks=qi((function(e,n,a,t){Ti(n,Ds(n),e,t)})),Es=qi((function(e,n,a,t){Ti(n,qs(n),e,t)})),Os=io(ct);var Ps=Xt((function(e,n){e=Pe(e);var a=-1,t=n.length,o=t>2?n[2]:i;for(o&&wo(n[0],n[1],o)&&(t=1);++a<t;)for(var r=n[a],s=Ds(r),c=-1,p=s.length;++c<p;){var u=s[c],l=e[u];(l===i||Hr(l,ze[u])&&!Le.call(e,u))&&(e[u]=r[u])}return e})),Rs=Xt((function(e){return e.push(i,no),On(Bs,i,e)}));function Cs(e,n,a){var t=null==e?i:Et(e,n);return t===i?a:t}function Ss(e,n){return null!=e&&bo(e,n,St)}var As=Hi((function(e,n,a){null!=n&&"function"!=typeof n.toString&&(n=Fe.call(n)),e[n]=a}),tc(rc)),Ts=Hi((function(e,n,a){null!=n&&"function"!=typeof n.toString&&(n=Fe.call(n)),Le.call(e,n)?e[n].push(a):e[n]=[a]}),uo),zs=Xt(Tt);function qs(e){return Jr(e)?Xa(e):Ut(e)}function Ds(e){return Jr(e)?Xa(e,!0):Ft(e)}var Ls=qi((function(e,n,a){Wt(e,n,a)})),Bs=qi((function(e,n,a,t){Wt(e,n,a,t)})),Us=io((function(e,n){var a={};if(null==e)return a;var t=!1;n=qn(n,(function(n){return n=_i(n,e),t||(t=n.length>1),n})),Ti(e,ro(e),a),t&&(a=ut(a,7,ao));for(var i=n.length;i--;)mi(a,n[i]);return a}));var Fs=io((function(e,n){return null==e?{}:function(e,n){return Vt(e,n,(function(n,a){return Ss(e,a)}))}(e,n)}));function Is(e,n){if(null==e)return{};var a=qn(ro(e),(function(e){return[e]}));return n=uo(n),Vt(e,a,(function(e,a){return n(e,a[0])}))}var Ms=Xi(qs),Ns=Xi(Ds);function Hs(e){return null==e?[]:Qn(e,qs(e))}var Ws=Ui((function(e,n,a){return n=n.toLowerCase(),e+(a?$s(n):n)}));function $s(e){return Qs(_s(e).toLowerCase())}function Gs(e){return(e=_s(e))&&e.replace(_e,ia).replace(Qe,"")}var Vs=Ui((function(e,n,a){return e+(a?"-":"")+n.toLowerCase()})),Ks=Ui((function(e,n,a){return e+(a?" ":"")+n.toLowerCase()})),Js=Bi("toLowerCase");var Ys=Ui((function(e,n,a){return e+(a?"_":"")+n.toLowerCase()}));var Zs=Ui((function(e,n,a){return e+(a?" ":"")+Qs(n)}));var Xs=Ui((function(e,n,a){return e+(a?" ":"")+n.toUpperCase()})),Qs=Bi("toUpperCase");function ec(e,n,a){return e=_s(e),(n=a?i:n)===i?function(e){return tn.test(e)}(e)?function(e){return e.match(nn)||[]}(e):function(e){return e.match(le)||[]}(e):e.match(n)||[]}var nc=Xt((function(e,n){try{return On(e,i,n)}catch(e){return Qr(e)?e:new ke(e)}})),ac=io((function(e,n){return Rn(n,(function(n){n=Io(n),st(e,n,Tr(e[n],e))})),e}));function tc(e){return function(){return e}}var ic=Mi(),oc=Mi(!0);function rc(e){return e}function sc(e){return Bt("function"==typeof e?e:ut(e,1))}var cc=Xt((function(e,n){return function(a){return Tt(a,e,n)}})),pc=Xt((function(e,n){return function(a){return Tt(e,a,n)}}));function uc(e,n,a){var t=qs(n),i=kt(n,t);null!=a||ts(n)&&(i.length||!t.length)||(a=n,n=e,e=this,i=kt(n,qs(n)));var o=!(ts(a)&&"chain"in a&&!a.chain),r=es(e);return Rn(i,(function(a){var t=n[a];e[a]=t,r&&(e.prototype[a]=function(){var n=this.__chain__;if(o||n){var a=e(this.__wrapped__),i=a.__actions__=Ai(this.__actions__);return i.push({func:t,args:arguments,thisArg:e}),a.__chain__=n,a}return t.apply(e,Dn([this.value()],arguments))})})),e}function lc(){}var dc=$i(qn),mc=$i(Sn),fc=$i(Un);function vc(e){return jo(e)?Gn(Io(e)):function(e){return function(n){return Et(n,e)}}(e)}var xc=Vi(),hc=Vi(!0);function bc(){return[]}function gc(){return!1}var yc=Wi((function(e,n){return e+n}),0),_c=Yi("ceil"),wc=Wi((function(e,n){return e/n}),1),jc=Yi("floor");var kc,Ec=Wi((function(e,n){return e*n}),1),Oc=Yi("round"),Pc=Wi((function(e,n){return e-n}),0);return Na.after=function(e,n){if("function"!=typeof n)throw new Se(o);return e=hs(e),function(){if(--e<1)return n.apply(this,arguments)}},Na.ary=Sr,Na.assign=ws,Na.assignIn=js,Na.assignInWith=ks,Na.assignWith=Es,Na.at=Os,Na.before=Ar,Na.bind=Tr,Na.bindAll=ac,Na.bindKey=zr,Na.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return Vr(e)?e:[e]},Na.chain=vr,Na.chunk=function(e,n,a){n=(a?wo(e,n,a):n===i)?1:ya(hs(n),0);var o=null==e?0:e.length;if(!o||n<1)return[];for(var r=0,s=0,c=t(xn(o/n));r<o;)c[s++]=oi(e,r,r+=n);return c},Na.compact=function(e){for(var n=-1,a=null==e?0:e.length,t=0,i=[];++n<a;){var o=e[n];o&&(i[t++]=o)}return i},Na.concat=function(){var e=arguments.length;if(!e)return[];for(var n=t(e-1),a=arguments[0],i=e;i--;)n[i-1]=arguments[i];return Dn(Vr(a)?Ai(a):[a],gt(n,1))},Na.cond=function(e){var n=null==e?0:e.length,a=uo();return e=n?qn(e,(function(e){if("function"!=typeof e[1])throw new Se(o);return[a(e[0]),e[1]]})):[],Xt((function(a){for(var t=-1;++t<n;){var i=e[t];if(On(i[0],this,a))return On(i[1],this,a)}}))},Na.conforms=function(e){return function(e){var n=qs(e);return function(a){return lt(a,e,n)}}(ut(e,1))},Na.constant=tc,Na.countBy=br,Na.create=function(e,n){var a=Ha(e);return null==n?a:rt(a,n)},Na.curry=function e(n,a,t){var o=Qi(n,8,i,i,i,i,i,a=t?i:a);return o.placeholder=e.placeholder,o},Na.curryRight=function e(n,a,t){var o=Qi(n,c,i,i,i,i,i,a=t?i:a);return o.placeholder=e.placeholder,o},Na.debounce=qr,Na.defaults=Ps,Na.defaultsDeep=Rs,Na.defer=Dr,Na.delay=Lr,Na.difference=Ho,Na.differenceBy=Wo,Na.differenceWith=$o,Na.drop=function(e,n,a){var t=null==e?0:e.length;return t?oi(e,(n=a||n===i?1:hs(n))<0?0:n,t):[]},Na.dropRight=function(e,n,a){var t=null==e?0:e.length;return t?oi(e,0,(n=t-(n=a||n===i?1:hs(n)))<0?0:n):[]},Na.dropRightWhile=function(e,n){return e&&e.length?vi(e,uo(n,3),!0,!0):[]},Na.dropWhile=function(e,n){return e&&e.length?vi(e,uo(n,3),!0):[]},Na.fill=function(e,n,a,t){var o=null==e?0:e.length;return o?(a&&"number"!=typeof a&&wo(e,n,a)&&(a=0,t=o),function(e,n,a,t){var o=e.length;for((a=hs(a))<0&&(a=-a>o?0:o+a),(t=t===i||t>o?o:hs(t))<0&&(t+=o),t=a>t?0:bs(t);a<t;)e[a++]=n;return e}(e,n,a,t)):[]},Na.filter=function(e,n){return(Vr(e)?An:bt)(e,uo(n,3))},Na.flatMap=function(e,n){return gt(Or(e,n),1)},Na.flatMapDeep=function(e,n){return gt(Or(e,n),m)},Na.flatMapDepth=function(e,n,a){return a=a===i?1:hs(a),gt(Or(e,n),a)},Na.flatten=Ko,Na.flattenDeep=function(e){return(null==e?0:e.length)?gt(e,m):[]},Na.flattenDepth=function(e,n){return(null==e?0:e.length)?gt(e,n=n===i?1:hs(n)):[]},Na.flip=function(e){return Qi(e,512)},Na.flow=ic,Na.flowRight=oc,Na.fromPairs=function(e){for(var n=-1,a=null==e?0:e.length,t={};++n<a;){var i=e[n];t[i[0]]=i[1]}return t},Na.functions=function(e){return null==e?[]:kt(e,qs(e))},Na.functionsIn=function(e){return null==e?[]:kt(e,Ds(e))},Na.groupBy=jr,Na.initial=function(e){return(null==e?0:e.length)?oi(e,0,-1):[]},Na.intersection=Yo,Na.intersectionBy=Zo,Na.intersectionWith=Xo,Na.invert=As,Na.invertBy=Ts,Na.invokeMap=kr,Na.iteratee=sc,Na.keyBy=Er,Na.keys=qs,Na.keysIn=Ds,Na.map=Or,Na.mapKeys=function(e,n){var a={};return n=uo(n,3),wt(e,(function(e,t,i){st(a,n(e,t,i),e)})),a},Na.mapValues=function(e,n){var a={};return n=uo(n,3),wt(e,(function(e,t,i){st(a,t,n(e,t,i))})),a},Na.matches=function(e){return Nt(ut(e,1))},Na.matchesProperty=function(e,n){return Ht(e,ut(n,1))},Na.memoize=Br,Na.merge=Ls,Na.mergeWith=Bs,Na.method=cc,Na.methodOf=pc,Na.mixin=uc,Na.negate=Ur,Na.nthArg=function(e){return e=hs(e),Xt((function(n){return $t(n,e)}))},Na.omit=Us,Na.omitBy=function(e,n){return Is(e,Ur(uo(n)))},Na.once=function(e){return Ar(2,e)},Na.orderBy=function(e,n,a,t){return null==e?[]:(Vr(n)||(n=null==n?[]:[n]),Vr(a=t?i:a)||(a=null==a?[]:[a]),Gt(e,n,a))},Na.over=dc,Na.overArgs=Fr,Na.overEvery=mc,Na.overSome=fc,Na.partial=Ir,Na.partialRight=Mr,Na.partition=Pr,Na.pick=Fs,Na.pickBy=Is,Na.property=vc,Na.propertyOf=function(e){return function(n){return null==e?i:Et(e,n)}},Na.pull=er,Na.pullAll=nr,Na.pullAllBy=function(e,n,a){return e&&e.length&&n&&n.length?Kt(e,n,uo(a,2)):e},Na.pullAllWith=function(e,n,a){return e&&e.length&&n&&n.length?Kt(e,n,i,a):e},Na.pullAt=ar,Na.range=xc,Na.rangeRight=hc,Na.rearg=Nr,Na.reject=function(e,n){return(Vr(e)?An:bt)(e,Ur(uo(n,3)))},Na.remove=function(e,n){var a=[];if(!e||!e.length)return a;var t=-1,i=[],o=e.length;for(n=uo(n,3);++t<o;){var r=e[t];n(r,t,e)&&(a.push(r),i.push(t))}return Jt(e,i),a},Na.rest=function(e,n){if("function"!=typeof e)throw new Se(o);return Xt(e,n=n===i?n:hs(n))},Na.reverse=tr,Na.sampleSize=function(e,n,a){return n=(a?wo(e,n,a):n===i)?1:hs(n),(Vr(e)?et:ei)(e,n)},Na.set=function(e,n,a){return null==e?e:ni(e,n,a)},Na.setWith=function(e,n,a,t){return t="function"==typeof t?t:i,null==e?e:ni(e,n,a,t)},Na.shuffle=function(e){return(Vr(e)?nt:ii)(e)},Na.slice=function(e,n,a){var t=null==e?0:e.length;return t?(a&&"number"!=typeof a&&wo(e,n,a)?(n=0,a=t):(n=null==n?0:hs(n),a=a===i?t:hs(a)),oi(e,n,a)):[]},Na.sortBy=Rr,Na.sortedUniq=function(e){return e&&e.length?pi(e):[]},Na.sortedUniqBy=function(e,n){return e&&e.length?pi(e,uo(n,2)):[]},Na.split=function(e,n,a){return a&&"number"!=typeof a&&wo(e,n,a)&&(n=a=i),(a=a===i?x:a>>>0)?(e=_s(e))&&("string"==typeof n||null!=n&&!cs(n))&&!(n=li(n))&&sa(e)?ji(fa(e),0,a):e.split(n,a):[]},Na.spread=function(e,n){if("function"!=typeof e)throw new Se(o);return n=null==n?0:ya(hs(n),0),Xt((function(a){var t=a[n],i=ji(a,0,n);return t&&Dn(i,t),On(e,this,i)}))},Na.tail=function(e){var n=null==e?0:e.length;return n?oi(e,1,n):[]},Na.take=function(e,n,a){return e&&e.length?oi(e,0,(n=a||n===i?1:hs(n))<0?0:n):[]},Na.takeRight=function(e,n,a){var t=null==e?0:e.length;return t?oi(e,(n=t-(n=a||n===i?1:hs(n)))<0?0:n,t):[]},Na.takeRightWhile=function(e,n){return e&&e.length?vi(e,uo(n,3),!1,!0):[]},Na.takeWhile=function(e,n){return e&&e.length?vi(e,uo(n,3)):[]},Na.tap=function(e,n){return n(e),e},Na.throttle=function(e,n,a){var t=!0,i=!0;if("function"!=typeof e)throw new Se(o);return ts(a)&&(t="leading"in a?!!a.leading:t,i="trailing"in a?!!a.trailing:i),qr(e,n,{leading:t,maxWait:n,trailing:i})},Na.thru=xr,Na.toArray=vs,Na.toPairs=Ms,Na.toPairsIn=Ns,Na.toPath=function(e){return Vr(e)?qn(e,Io):ls(e)?[e]:Ai(Fo(_s(e)))},Na.toPlainObject=ys,Na.transform=function(e,n,a){var t=Vr(e),i=t||Zr(e)||ds(e);if(n=uo(n,4),null==a){var o=e&&e.constructor;a=i?t?new o:[]:ts(e)&&es(o)?Ha(Ve(e)):{}}return(i?Rn:wt)(e,(function(e,t,i){return n(a,e,t,i)})),a},Na.unary=function(e){return Sr(e,1)},Na.union=ir,Na.unionBy=or,Na.unionWith=rr,Na.uniq=function(e){return e&&e.length?di(e):[]},Na.uniqBy=function(e,n){return e&&e.length?di(e,uo(n,2)):[]},Na.uniqWith=function(e,n){return n="function"==typeof n?n:i,e&&e.length?di(e,i,n):[]},Na.unset=function(e,n){return null==e||mi(e,n)},Na.unzip=sr,Na.unzipWith=cr,Na.update=function(e,n,a){return null==e?e:fi(e,n,yi(a))},Na.updateWith=function(e,n,a,t){return t="function"==typeof t?t:i,null==e?e:fi(e,n,yi(a),t)},Na.values=Hs,Na.valuesIn=function(e){return null==e?[]:Qn(e,Ds(e))},Na.without=pr,Na.words=ec,Na.wrap=function(e,n){return Ir(yi(n),e)},Na.xor=ur,Na.xorBy=lr,Na.xorWith=dr,Na.zip=mr,Na.zipObject=function(e,n){return bi(e||[],n||[],tt)},Na.zipObjectDeep=function(e,n){return bi(e||[],n||[],ni)},Na.zipWith=fr,Na.entries=Ms,Na.entriesIn=Ns,Na.extend=js,Na.extendWith=ks,uc(Na,Na),Na.add=yc,Na.attempt=nc,Na.camelCase=Ws,Na.capitalize=$s,Na.ceil=_c,Na.clamp=function(e,n,a){return a===i&&(a=n,n=i),a!==i&&(a=(a=gs(a))==a?a:0),n!==i&&(n=(n=gs(n))==n?n:0),pt(gs(e),n,a)},Na.clone=function(e){return ut(e,4)},Na.cloneDeep=function(e){return ut(e,5)},Na.cloneDeepWith=function(e,n){return ut(e,5,n="function"==typeof n?n:i)},Na.cloneWith=function(e,n){return ut(e,4,n="function"==typeof n?n:i)},Na.conformsTo=function(e,n){return null==n||lt(e,n,qs(n))},Na.deburr=Gs,Na.defaultTo=function(e,n){return null==e||e!=e?n:e},Na.divide=wc,Na.endsWith=function(e,n,a){e=_s(e),n=li(n);var t=e.length,o=a=a===i?t:pt(hs(a),0,t);return(a-=n.length)>=0&&e.slice(a,o)==n},Na.eq=Hr,Na.escape=function(e){return(e=_s(e))&&Z.test(e)?e.replace(J,oa):e},Na.escapeRegExp=function(e){return(e=_s(e))&&oe.test(e)?e.replace(ie,"\\$&"):e},Na.every=function(e,n,a){var t=Vr(e)?Sn:xt;return a&&wo(e,n,a)&&(n=i),t(e,uo(n,3))},Na.find=gr,Na.findIndex=Go,Na.findKey=function(e,n){return In(e,uo(n,3),wt)},Na.findLast=yr,Na.findLastIndex=Vo,Na.findLastKey=function(e,n){return In(e,uo(n,3),jt)},Na.floor=jc,Na.forEach=_r,Na.forEachRight=wr,Na.forIn=function(e,n){return null==e?e:yt(e,uo(n,3),Ds)},Na.forInRight=function(e,n){return null==e?e:_t(e,uo(n,3),Ds)},Na.forOwn=function(e,n){return e&&wt(e,uo(n,3))},Na.forOwnRight=function(e,n){return e&&jt(e,uo(n,3))},Na.get=Cs,Na.gt=Wr,Na.gte=$r,Na.has=function(e,n){return null!=e&&bo(e,n,Ct)},Na.hasIn=Ss,Na.head=Jo,Na.identity=rc,Na.includes=function(e,n,a,t){e=Jr(e)?e:Hs(e),a=a&&!t?hs(a):0;var i=e.length;return a<0&&(a=ya(i+a,0)),us(e)?a<=i&&e.indexOf(n,a)>-1:!!i&&Nn(e,n,a)>-1},Na.indexOf=function(e,n,a){var t=null==e?0:e.length;if(!t)return-1;var i=null==a?0:hs(a);return i<0&&(i=ya(t+i,0)),Nn(e,n,i)},Na.inRange=function(e,n,a){return n=xs(n),a===i?(a=n,n=0):a=xs(a),function(e,n,a){return e>=_a(n,a)&&e<ya(n,a)}(e=gs(e),n,a)},Na.invoke=zs,Na.isArguments=Gr,Na.isArray=Vr,Na.isArrayBuffer=Kr,Na.isArrayLike=Jr,Na.isArrayLikeObject=Yr,Na.isBoolean=function(e){return!0===e||!1===e||is(e)&&Pt(e)==y},Na.isBuffer=Zr,Na.isDate=Xr,Na.isElement=function(e){return is(e)&&1===e.nodeType&&!ss(e)},Na.isEmpty=function(e){if(null==e)return!0;if(Jr(e)&&(Vr(e)||"string"==typeof e||"function"==typeof e.splice||Zr(e)||ds(e)||Gr(e)))return!e.length;var n=ho(e);if(n==E||n==S)return!e.size;if(Oo(e))return!Ut(e).length;for(var a in e)if(Le.call(e,a))return!1;return!0},Na.isEqual=function(e,n){return qt(e,n)},Na.isEqualWith=function(e,n,a){var t=(a="function"==typeof a?a:i)?a(e,n):i;return t===i?qt(e,n,i,a):!!t},Na.isError=Qr,Na.isFinite=function(e){return"number"==typeof e&&Vn(e)},Na.isFunction=es,Na.isInteger=ns,Na.isLength=as,Na.isMap=os,Na.isMatch=function(e,n){return e===n||Dt(e,n,mo(n))},Na.isMatchWith=function(e,n,a){return a="function"==typeof a?a:i,Dt(e,n,mo(n),a)},Na.isNaN=function(e){return rs(e)&&e!=+e},Na.isNative=function(e){if(Eo(e))throw new ke("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Lt(e)},Na.isNil=function(e){return null==e},Na.isNull=function(e){return null===e},Na.isNumber=rs,Na.isObject=ts,Na.isObjectLike=is,Na.isPlainObject=ss,Na.isRegExp=cs,Na.isSafeInteger=function(e){return ns(e)&&e>=-9007199254740991&&e<=f},Na.isSet=ps,Na.isString=us,Na.isSymbol=ls,Na.isTypedArray=ds,Na.isUndefined=function(e){return e===i},Na.isWeakMap=function(e){return is(e)&&ho(e)==z},Na.isWeakSet=function(e){return is(e)&&"[object WeakSet]"==Pt(e)},Na.join=function(e,n){return null==e?"":ba.call(e,n)},Na.kebabCase=Vs,Na.last=Qo,Na.lastIndexOf=function(e,n,a){var t=null==e?0:e.length;if(!t)return-1;var o=t;return a!==i&&(o=(o=hs(a))<0?ya(t+o,0):_a(o,t-1)),n==n?function(e,n,a){for(var t=a+1;t--;)if(e[t]===n)return t;return t}(e,n,o):Mn(e,Wn,o,!0)},Na.lowerCase=Ks,Na.lowerFirst=Js,Na.lt=ms,Na.lte=fs,Na.max=function(e){return e&&e.length?ht(e,rc,Rt):i},Na.maxBy=function(e,n){return e&&e.length?ht(e,uo(n,2),Rt):i},Na.mean=function(e){return $n(e,rc)},Na.meanBy=function(e,n){return $n(e,uo(n,2))},Na.min=function(e){return e&&e.length?ht(e,rc,It):i},Na.minBy=function(e,n){return e&&e.length?ht(e,uo(n,2),It):i},Na.stubArray=bc,Na.stubFalse=gc,Na.stubObject=function(){return{}},Na.stubString=function(){return""},Na.stubTrue=function(){return!0},Na.multiply=Ec,Na.nth=function(e,n){return e&&e.length?$t(e,hs(n)):i},Na.noConflict=function(){return fn._===this&&(fn._=Me),this},Na.noop=lc,Na.now=Cr,Na.pad=function(e,n,a){e=_s(e);var t=(n=hs(n))?ma(e):0;if(!n||t>=n)return e;var i=(n-t)/2;return Gi(bn(i),a)+e+Gi(xn(i),a)},Na.padEnd=function(e,n,a){e=_s(e);var t=(n=hs(n))?ma(e):0;return n&&t<n?e+Gi(n-t,a):e},Na.padStart=function(e,n,a){e=_s(e);var t=(n=hs(n))?ma(e):0;return n&&t<n?Gi(n-t,a)+e:e},Na.parseInt=function(e,n,a){return a||null==n?n=0:n&&(n=+n),ja(_s(e).replace(re,""),n||0)},Na.random=function(e,n,a){if(a&&"boolean"!=typeof a&&wo(e,n,a)&&(n=a=i),a===i&&("boolean"==typeof n?(a=n,n=i):"boolean"==typeof e&&(a=e,e=i)),e===i&&n===i?(e=0,n=1):(e=xs(e),n===i?(n=e,e=0):n=xs(n)),e>n){var t=e;e=n,n=t}if(a||e%1||n%1){var o=ka();return _a(e+o*(n-e+un("1e-"+((o+"").length-1))),n)}return Yt(e,n)},Na.reduce=function(e,n,a){var t=Vr(e)?Ln:Kn,i=arguments.length<3;return t(e,uo(n,4),a,i,ft)},Na.reduceRight=function(e,n,a){var t=Vr(e)?Bn:Kn,i=arguments.length<3;return t(e,uo(n,4),a,i,vt)},Na.repeat=function(e,n,a){return n=(a?wo(e,n,a):n===i)?1:hs(n),Zt(_s(e),n)},Na.replace=function(){var e=arguments,n=_s(e[0]);return e.length<3?n:n.replace(e[1],e[2])},Na.result=function(e,n,a){var t=-1,o=(n=_i(n,e)).length;for(o||(o=1,e=i);++t<o;){var r=null==e?i:e[Io(n[t])];r===i&&(t=o,r=a),e=es(r)?r.call(e):r}return e},Na.round=Oc,Na.runInContext=e,Na.sample=function(e){return(Vr(e)?Qa:Qt)(e)},Na.size=function(e){if(null==e)return 0;if(Jr(e))return us(e)?ma(e):e.length;var n=ho(e);return n==E||n==S?e.size:Ut(e).length},Na.snakeCase=Ys,Na.some=function(e,n,a){var t=Vr(e)?Un:ri;return a&&wo(e,n,a)&&(n=i),t(e,uo(n,3))},Na.sortedIndex=function(e,n){return si(e,n)},Na.sortedIndexBy=function(e,n,a){return ci(e,n,uo(a,2))},Na.sortedIndexOf=function(e,n){var a=null==e?0:e.length;if(a){var t=si(e,n);if(t<a&&Hr(e[t],n))return t}return-1},Na.sortedLastIndex=function(e,n){return si(e,n,!0)},Na.sortedLastIndexBy=function(e,n,a){return ci(e,n,uo(a,2),!0)},Na.sortedLastIndexOf=function(e,n){if(null==e?0:e.length){var a=si(e,n,!0)-1;if(Hr(e[a],n))return a}return-1},Na.startCase=Zs,Na.startsWith=function(e,n,a){return e=_s(e),a=null==a?0:pt(hs(a),0,e.length),n=li(n),e.slice(a,a+n.length)==n},Na.subtract=Pc,Na.sum=function(e){return e&&e.length?Jn(e,rc):0},Na.sumBy=function(e,n){return e&&e.length?Jn(e,uo(n,2)):0},Na.template=function(e,n,a){var t=Na.templateSettings;a&&wo(e,n,a)&&(n=i),e=_s(e),n=ks({},n,t,eo);var o,r,s=ks({},n.imports,t.imports,eo),c=qs(s),p=Qn(s,c),u=0,l=n.interpolate||we,d="__p += '",m=Re((n.escape||we).source+"|"+l.source+"|"+(l===ee?fe:we).source+"|"+(n.evaluate||we).source+"|$","g"),f="//# sourceURL="+(Le.call(n,"sourceURL")?(n.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++rn+"]")+"\n";e.replace(m,(function(n,a,t,i,s,c){return t||(t=i),d+=e.slice(u,c).replace(je,ra),a&&(o=!0,d+="' +\n__e("+a+") +\n'"),s&&(r=!0,d+="';\n"+s+";\n__p += '"),t&&(d+="' +\n((__t = ("+t+")) == null ? '' : __t) +\n'"),u=c+n.length,n})),d+="';\n";var v=Le.call(n,"variable")&&n.variable;if(v){if(de.test(v))throw new ke("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(r?d.replace($,""):d).replace(G,"$1").replace(V,"$1;"),d="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(r?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var x=nc((function(){return Ee(c,f+"return "+d).apply(i,p)}));if(x.source=d,Qr(x))throw x;return x},Na.times=function(e,n){if((e=hs(e))<1||e>f)return[];var a=x,t=_a(e,x);n=uo(n),e-=x;for(var i=Yn(t,n);++a<e;)n(a);return i},Na.toFinite=xs,Na.toInteger=hs,Na.toLength=bs,Na.toLower=function(e){return _s(e).toLowerCase()},Na.toNumber=gs,Na.toSafeInteger=function(e){return e?pt(hs(e),-9007199254740991,f):0===e?e:0},Na.toString=_s,Na.toUpper=function(e){return _s(e).toUpperCase()},Na.trim=function(e,n,a){if((e=_s(e))&&(a||n===i))return Zn(e);if(!e||!(n=li(n)))return e;var t=fa(e),o=fa(n);return ji(t,na(t,o),aa(t,o)+1).join("")},Na.trimEnd=function(e,n,a){if((e=_s(e))&&(a||n===i))return e.slice(0,va(e)+1);if(!e||!(n=li(n)))return e;var t=fa(e);return ji(t,0,aa(t,fa(n))+1).join("")},Na.trimStart=function(e,n,a){if((e=_s(e))&&(a||n===i))return e.replace(re,"");if(!e||!(n=li(n)))return e;var t=fa(e);return ji(t,na(t,fa(n))).join("")},Na.truncate=function(e,n){var a=30,t="...";if(ts(n)){var o="separator"in n?n.separator:o;a="length"in n?hs(n.length):a,t="omission"in n?li(n.omission):t}var r=(e=_s(e)).length;if(sa(e)){var s=fa(e);r=s.length}if(a>=r)return e;var c=a-ma(t);if(c<1)return t;var p=s?ji(s,0,c).join(""):e.slice(0,c);if(o===i)return p+t;if(s&&(c+=p.length-c),cs(o)){if(e.slice(c).search(o)){var u,l=p;for(o.global||(o=Re(o.source,_s(ve.exec(o))+"g")),o.lastIndex=0;u=o.exec(l);)var d=u.index;p=p.slice(0,d===i?c:d)}}else if(e.indexOf(li(o),c)!=c){var m=p.lastIndexOf(o);m>-1&&(p=p.slice(0,m))}return p+t},Na.unescape=function(e){return(e=_s(e))&&Y.test(e)?e.replace(K,xa):e},Na.uniqueId=function(e){var n=++Be;return _s(e)+n},Na.upperCase=Xs,Na.upperFirst=Qs,Na.each=_r,Na.eachRight=wr,Na.first=Jo,uc(Na,(kc={},wt(Na,(function(e,n){Le.call(Na.prototype,n)||(kc[n]=e)})),kc),{chain:!1}),Na.VERSION="4.17.21",Rn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){Na[e].placeholder=Na})),Rn(["drop","take"],(function(e,n){Ga.prototype[e]=function(a){a=a===i?1:ya(hs(a),0);var t=this.__filtered__&&!n?new Ga(this):this.clone();return t.__filtered__?t.__takeCount__=_a(a,t.__takeCount__):t.__views__.push({size:_a(a,x),type:e+(t.__dir__<0?"Right":"")}),t},Ga.prototype[e+"Right"]=function(n){return this.reverse()[e](n).reverse()}})),Rn(["filter","map","takeWhile"],(function(e,n){var a=n+1,t=1==a||3==a;Ga.prototype[e]=function(e){var n=this.clone();return n.__iteratees__.push({iteratee:uo(e,3),type:a}),n.__filtered__=n.__filtered__||t,n}})),Rn(["head","last"],(function(e,n){var a="take"+(n?"Right":"");Ga.prototype[e]=function(){return this[a](1).value()[0]}})),Rn(["initial","tail"],(function(e,n){var a="drop"+(n?"":"Right");Ga.prototype[e]=function(){return this.__filtered__?new Ga(this):this[a](1)}})),Ga.prototype.compact=function(){return this.filter(rc)},Ga.prototype.find=function(e){return this.filter(e).head()},Ga.prototype.findLast=function(e){return this.reverse().find(e)},Ga.prototype.invokeMap=Xt((function(e,n){return"function"==typeof e?new Ga(this):this.map((function(a){return Tt(a,e,n)}))})),Ga.prototype.reject=function(e){return this.filter(Ur(uo(e)))},Ga.prototype.slice=function(e,n){e=hs(e);var a=this;return a.__filtered__&&(e>0||n<0)?new Ga(a):(e<0?a=a.takeRight(-e):e&&(a=a.drop(e)),n!==i&&(a=(n=hs(n))<0?a.dropRight(-n):a.take(n-e)),a)},Ga.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Ga.prototype.toArray=function(){return this.take(x)},wt(Ga.prototype,(function(e,n){var a=/^(?:filter|find|map|reject)|While$/.test(n),t=/^(?:head|last)$/.test(n),o=Na[t?"take"+("last"==n?"Right":""):n],r=t||/^find/.test(n);o&&(Na.prototype[n]=function(){var n=this.__wrapped__,s=t?[1]:arguments,c=n instanceof Ga,p=s[0],u=c||Vr(n),l=function(e){var n=o.apply(Na,Dn([e],s));return t&&d?n[0]:n};u&&a&&"function"==typeof p&&1!=p.length&&(c=u=!1);var d=this.__chain__,m=!!this.__actions__.length,f=r&&!d,v=c&&!m;if(!r&&u){n=v?n:new Ga(this);var x=e.apply(n,s);return x.__actions__.push({func:xr,args:[l],thisArg:i}),new $a(x,d)}return f&&v?e.apply(this,s):(x=this.thru(l),f?t?x.value()[0]:x.value():x)})})),Rn(["pop","push","shift","sort","splice","unshift"],(function(e){var n=Ae[e],a=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",t=/^(?:pop|shift)$/.test(e);Na.prototype[e]=function(){var e=arguments;if(t&&!this.__chain__){var i=this.value();return n.apply(Vr(i)?i:[],e)}return this[a]((function(a){return n.apply(Vr(a)?a:[],e)}))}})),wt(Ga.prototype,(function(e,n){var a=Na[n];if(a){var t=a.name+"";Le.call(za,t)||(za[t]=[]),za[t].push({name:n,func:a})}})),za[Ni(i,2).name]=[{name:"wrapper",func:i}],Ga.prototype.clone=function(){var e=new Ga(this.__wrapped__);return e.__actions__=Ai(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Ai(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Ai(this.__views__),e},Ga.prototype.reverse=function(){if(this.__filtered__){var e=new Ga(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Ga.prototype.value=function(){var e=this.__wrapped__.value(),n=this.__dir__,a=Vr(e),t=n<0,i=a?e.length:0,o=function(e,n,a){var t=-1,i=a.length;for(;++t<i;){var o=a[t],r=o.size;switch(o.type){case"drop":e+=r;break;case"dropRight":n-=r;break;case"take":n=_a(n,e+r);break;case"takeRight":e=ya(e,n-r)}}return{start:e,end:n}}(0,i,this.__views__),r=o.start,s=o.end,c=s-r,p=t?s:r-1,u=this.__iteratees__,l=u.length,d=0,m=_a(c,this.__takeCount__);if(!a||!t&&i==c&&m==c)return xi(e,this.__actions__);var f=[];e:for(;c--&&d<m;){for(var v=-1,x=e[p+=n];++v<l;){var h=u[v],b=h.iteratee,g=h.type,y=b(x);if(2==g)x=y;else if(!y){if(1==g)continue e;break e}}f[d++]=x}return f},Na.prototype.at=hr,Na.prototype.chain=function(){return vr(this)},Na.prototype.commit=function(){return new $a(this.value(),this.__chain__)},Na.prototype.next=function(){this.__values__===i&&(this.__values__=vs(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},Na.prototype.plant=function(e){for(var n,a=this;a instanceof Wa;){var t=No(a);t.__index__=0,t.__values__=i,n?o.__wrapped__=t:n=t;var o=t;a=a.__wrapped__}return o.__wrapped__=e,n},Na.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof Ga){var n=e;return this.__actions__.length&&(n=new Ga(this)),(n=n.reverse()).__actions__.push({func:xr,args:[tr],thisArg:i}),new $a(n,this.__chain__)}return this.thru(tr)},Na.prototype.toJSON=Na.prototype.valueOf=Na.prototype.value=function(){return xi(this.__wrapped__,this.__actions__)},Na.prototype.first=Na.prototype.head,en&&(Na.prototype[en]=function(){return this}),Na}();fn._=ha,(t=function(){return ha}.call(n,a,n,e))===i||(e.exports=t)}.call(this)},5234:(e,n,a)=>{e.exports=a(3765)},983:(e,n,a)=>{"use strict";var t,i,o,r=a(5234),s=a(1017).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,p=/^text\//i;function u(e){if(!e||"string"!=typeof e)return!1;var n=c.exec(e),a=n&&r[n[1].toLowerCase()];return a&&a.charset?a.charset:!(!n||!p.test(n[1]))&&"UTF-8"}n.charset=u,n.charsets={lookup:u},n.contentType=function(e){if(!e||"string"!=typeof e)return!1;var a=-1===e.indexOf("/")?n.lookup(e):e;if(!a)return!1;if(-1===a.indexOf("charset")){var t=n.charset(a);t&&(a+="; charset="+t.toLowerCase())}return a},n.extension=function(e){if(!e||"string"!=typeof e)return!1;var a=c.exec(e),t=a&&n.extensions[a[1].toLowerCase()];if(!t||!t.length)return!1;return t[0]},n.extensions=Object.create(null),n.lookup=function(e){if(!e||"string"!=typeof e)return!1;var a=s("x."+e).toLowerCase().substr(1);if(!a)return!1;return n.types[a]||!1},n.types=Object.create(null),t=n.extensions,i=n.types,o=["nginx","apache",void 0,"iana"],Object.keys(r).forEach((function(e){var n=r[e],a=n.extensions;if(a&&a.length){t[e]=a;for(var s=0;s<a.length;s++){var c=a[s];if(i[c]){var p=o.indexOf(r[i[c]].source),u=o.indexOf(n.source);if("application/octet-stream"!==i[c]&&(p>u||p===u&&"application/"===i[c].substr(0,12)))continue}i[c]=e}}}))},7824:e=>{var n=1e3,a=60*n,t=60*a,i=24*t,o=7*i,r=365.25*i;function s(e,n,a,t){var i=n>=1.5*a;return Math.round(e/a)+" "+t+(i?"s":"")}e.exports=function(e,c){c=c||{};var p=typeof e;if("string"===p&&e.length>0)return function(e){if((e=String(e)).length>100)return;var s=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!s)return;var c=parseFloat(s[1]);switch((s[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return c*r;case"weeks":case"week":case"w":return c*o;case"days":case"day":case"d":return c*i;case"hours":case"hour":case"hrs":case"hr":case"h":return c*t;case"minutes":case"minute":case"mins":case"min":case"m":return c*a;case"seconds":case"second":case"secs":case"sec":case"s":return c*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return c;default:return}}(e);if("number"===p&&isFinite(e))return c.long?function(e){var o=Math.abs(e);if(o>=i)return s(e,o,i,"day");if(o>=t)return s(e,o,t,"hour");if(o>=a)return s(e,o,a,"minute");if(o>=n)return s(e,o,n,"second");return e+" ms"}(e):function(e){var o=Math.abs(e);if(o>=i)return Math.round(e/i)+"d";if(o>=t)return Math.round(e/t)+"h";if(o>=a)return Math.round(e/a)+"m";if(o>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},2130:(e,n,a)=>{"use strict";const t=a(2037),i=a(6224),o=a(6560),{env:r}=process;let s;function c(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}function p(e,n){if(0===s)return 0;if(o("color=16m")||o("color=full")||o("color=truecolor"))return 3;if(o("color=256"))return 2;if(e&&!n&&void 0===s)return 0;const a=s||0;if("dumb"===r.TERM)return a;if("win32"===process.platform){const e=t.release().split(".");return Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in r)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE"].some((e=>e in r))||"codeship"===r.CI_NAME?1:a;if("TEAMCITY_VERSION"in r)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(r.TEAMCITY_VERSION)?1:0;if("truecolor"===r.COLORTERM)return 3;if("TERM_PROGRAM"in r){const e=parseInt((r.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(r.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(r.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(r.TERM)||"COLORTERM"in r?1:a}o("no-color")||o("no-colors")||o("color=false")||o("color=never")?s=0:(o("color")||o("colors")||o("color=true")||o("color=always"))&&(s=1),"FORCE_COLOR"in r&&(s="true"===r.FORCE_COLOR?1:"false"===r.FORCE_COLOR?0:0===r.FORCE_COLOR.length?1:Math.min(parseInt(r.FORCE_COLOR,10),3)),e.exports={supportsColor:function(e){return c(p(e,e&&e.isTTY))},stdout:c(p(!0,i.isatty(1))),stderr:c(p(!0,i.isatty(2)))}},4078:function(e,n,a){var t,i,o;o=function(){function e(e){var n=[];if(0===e.length)return"";if("string"!=typeof e[0])throw new TypeError("Url must be a string. Received "+e[0]);if(e[0].match(/^[^/:]+:\/*$/)&&e.length>1){var a=e.shift();e[0]=a+e[0]}e[0].match(/^file:\/\/\//)?e[0]=e[0].replace(/^([^/:]+):\/*/,"$1:///"):e[0]=e[0].replace(/^([^/:]+):\/*/,"$1://");for(var t=0;t<e.length;t++){var i=e[t];if("string"!=typeof i)throw new TypeError("Url must be a string. Received "+i);""!==i&&(t>0&&(i=i.replace(/^[\/]+/,"")),i=t<e.length-1?i.replace(/[\/]+$/,""):i.replace(/[\/]+$/,"/"),n.push(i))}var o=n.join("/"),r=(o=o.replace(/\/(\?|&|#[^!])/g,"$1")).split("?");return o=r.shift()+(r.length>0?"?":"")+r.join("&")}return function(){return e("object"==typeof arguments[0]?arguments[0]:[].slice.call(arguments))}},e.exports?e.exports=o():void 0===(i="function"==typeof(t=o)?t.call(n,a,n,e):t)||(e.exports=i)},9491:e=>{"use strict";e.exports=require("assert")},7147:e=>{"use strict";e.exports=require("fs")},3685:e=>{"use strict";e.exports=require("http")},5687:e=>{"use strict";e.exports=require("https")},2037:e=>{"use strict";e.exports=require("os")},1017:e=>{"use strict";e.exports=require("path")},2781:e=>{"use strict";e.exports=require("stream")},6224:e=>{"use strict";e.exports=require("tty")},7310:e=>{"use strict";e.exports=require("url")},3837:e=>{"use strict";e.exports=require("util")},9796:e=>{"use strict";e.exports=require("zlib")},3765:e=>{"use strict";e.exports=JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/3gpphal+json":{"source":"iana","compressible":true},"application/3gpphalforms+json":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/ace+cbor":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/alto-updatestreamcontrol+json":{"source":"iana","compressible":true},"application/alto-updatestreamparams+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/at+jwt":{"source":"iana"},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-dynamic-event-message":{"source":"iana"},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/captive+json":{"source":"iana","compressible":true},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/city+json":{"source":"iana","compressible":true},"application/clr":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true,"extensions":["cpl"]},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dash-patch+xml":{"source":"iana","compressible":true,"extensions":["mpp"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dots+cbor":{"source":"iana"},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["es","ecma"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/elm+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/elm+xml":{"source":"iana","compressible":true},"application/emergencycalldata.cap+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/express":{"source":"iana","extensions":["exp"]},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/fhir+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/jscalendar+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lpf+zip":{"source":"iana","compressible":false},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true,"extensions":["mpf"]},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/missing-blocks+cbor-seq":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true},"application/mrb-publish+xml":{"source":"iana","compressible":true},"application/msc-ivr+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msc-mixer+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana","charset":"US-ASCII"},"application/news-groupinfo":{"source":"iana","charset":"US-ASCII"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana","extensions":["cjs"]},"application/nss":{"source":"iana"},"application/oauth-authz-req+jwt":{"source":"iana"},"application/oblivious-dns-message":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{"source":"iana","compressible":true},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p21":{"source":"iana"},"application/p21+zip":{"source":"iana","compressible":false},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana","extensions":["asc"]},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pidf-diff+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.cyn":{"source":"iana","charset":"7-BIT"},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/pvd+json":{"source":"iana","compressible":true},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sarif+json":{"source":"iana","compressible":true},"application/sarif-external-properties+json":{"source":"iana","compressible":true},"application/sbe":{"source":"iana"},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-etch+cbor":{"source":"iana"},"application/senml-etch+json":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spdx+json":{"source":"iana","compressible":true},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/td+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/token-introspection+jwt":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana","extensions":["trig"]},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ubjson":{"compressible":false,"extensions":["ubj"]},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true,"extensions":["td"]},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.5gnas":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gtpc":{"source":"iana"},"application/vnd.3gpp.interworking-data":{"source":"iana"},"application/vnd.3gpp.lpp":{"source":"iana"},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ngap":{"source":"iana"},"application/vnd.3gpp.pfcp":{"source":"iana"},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.s1ap":{"source":"iana"},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.cmoca-cmresource":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-cmtable":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.age":{"source":"iana","extensions":["age"]},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.arrow.file":{"source":"iana"},"application/vnd.apache.arrow.stream":{"source":"iana"},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["key"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.cryptomator.encrypted":{"source":"iana"},"application/vnd.cryptomator.vault":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.cyclonedx+json":{"source":"iana","compressible":true},"application/vnd.cyclonedx+xml":{"source":"iana","compressible":true},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.d3m-dataset":{"source":"iana"},"application/vnd.d3m-problem":{"source":"iana"},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.dbf":{"source":"iana","extensions":["dbf"]},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbisl+xml":{"source":"iana","compressible":true},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.eclipse.ditto+json":{"source":"iana","compressible":true},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eu.kasparian.car+json":{"source":"iana","compressible":true},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.familysearch.gedcom+zip":{"source":"iana","compressible":false},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujifilm.fb.docuworks":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.container":{"source":"iana"},"application/vnd.fujifilm.fb.jfi+xml":{"source":"iana","compressible":true},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.slides":{"source":"iana"},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hl7cda+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hl7v2+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana","extensions":["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxar.archive.3tz+zip":{"source":"iana","compressible":false},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.nacamar.ybrid+json":{"source":"iana","compressible":true},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nebumind.line":{"source":"iana"},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oci.image.manifest.v1+json":{"source":"iana","compressible":true},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+cbor":{"source":"iana"},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.opentimestamps.ots":{"source":"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana","extensions":["rar"]},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.resilient.logic":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sar":{"source":"iana"},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.seis+json":{"source":"iana","compressible":true},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.shp":{"source":"iana"},"application/vnd.shx":{"source":"iana"},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.snesdev-page-table":{"source":"iana"},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.sycle+xml":{"source":"iana","compressible":true},"application/vnd.syft+json":{"source":"iana","compressible":true},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","charset":"UTF-8","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veritone.aion+json":{"source":"iana","compressible":true},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","charset":"UTF-8","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.dpp":{"source":"iana"},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"source":"iana","compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true,"extensions":["wif"]},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-iwork-keynote-sffkey":{"extensions":["key"]},"application/x-iwork-numbers-sffnumbers":{"extensions":["numbers"]},"application/x-iwork-pages-sffpages":{"extensions":["pages"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-pki-message":{"source":"iana"},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"iana","extensions":["der","crt","pem"]},"application/x-x509-ca-ra-cert":{"source":"iana"},"application/x-x509-next-ca-cert":{"source":"iana"},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xsl","xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana","extensions":["amr"]},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/mhas":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx","opus"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/scip":{"source":"iana"},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sofa":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tetra_acelp_bb":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/tsvcis":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana","extensions":["avci"]},"image/avcs":{"source":"iana","extensions":["avcs"]},"image/avif":{"source":"iana","compressible":false,"extensions":["avif"]},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/ktx2":{"source":"iana","extensions":["ktx2"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","compressible":true,"extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"compressible":true,"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.pco.b16":{"source":"iana","extensions":["b16"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/e57":{"source":"iana"},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/mtl":{"source":"iana","extensions":["mtl"]},"model/obj":{"source":"iana","extensions":["obj"]},"model/step":{"source":"iana"},"model/step+xml":{"source":"iana","compressible":true,"extensions":["stpx"]},"model/step+zip":{"source":"iana","compressible":false,"extensions":["stpz"]},"model/step-xml+zip":{"source":"iana","compressible":false,"extensions":["stpxz"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.pytha.pyox":{"source":"iana"},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.sap.vds":{"source":"iana","extensions":["vds"]},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/cql":{"source":"iana"},"text/cql-expression":{"source":"iana"},"text/cql-identifier":{"source":"iana"},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/fhirpath":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/gff3":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana","charset":"UTF-8"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana","charset":"UTF-8"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shaclc":{"source":"iana"},"text/shex":{"source":"iana","extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/spdx":{"source":"iana","extensions":["spdx"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana","charset":"UTF-8"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana","charset":"UTF-8"},"text/vnd.familysearch.gedcom":{"source":"iana","extensions":["ged"]},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hans":{"source":"iana"},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","charset":"UTF-8","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana","charset":"UTF-8"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"compressible":true,"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/av1":{"source":"iana"},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/ffv1":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana","extensions":["m4s"]},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/jxsv":{"source":"iana"},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/scip":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/vp9":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}')}},n={};function a(t){var i=n[t];if(void 0!==i)return i.exports;var o=n[t]={id:t,loaded:!1,exports:{}};return e[t].call(o.exports,o,o.exports,a),o.loaded=!0,o.exports}return a.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),a(1073)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,